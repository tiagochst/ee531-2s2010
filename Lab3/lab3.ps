%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: lab3.dvi
%%CreationDate: Fri Sep 17 18:36:52 2010
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: CMCSC10 CMR17 CMTI10 CMR10 CMBX12 CMMI10 CMMI7 CMR7
%%+ CMSY10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips lab3.dvi -o
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2010.09.17:1836
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 327 2010-05-24 15:54:43Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.07, 2009/04/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep div cvi def
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  XA Shift sub YA Shift sub moveto 
  gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
  Symbol show grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  showpoints 
    { ] aload /Points ED } 
    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    0 exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop 0 Lineto
      n { 2 copy moveto pop 0 Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop 0
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    startAngle rotate Symbol show 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} 
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if
    Symbol show 
    grestore
  }
  pathforall 
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 350 2010-06-18 05:18:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.02, 2010/06/08
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore}bind
def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave
pgfsoa .setopacityalpha stroke grestore}bind def}bind def /pgffoa 1
def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.665 1.665 3.00003 0.0 3.00003 curveto -1.665 3.00003
-3.00003 1.665 -3.00003 0.0 curveto -3.00003 -1.665 -1.665 -3.00003
0.0 -3.00003 curveto 1.665 -3.00003 3.00003 -1.665 3.00003 0.0 curveto
closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore
newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4CD5C7347D2E
1D0D6630F446F3708FCB29A85F40B4DAB4D60AA8F5B2DBD67F2E45D80C7A7E86
144669F75F8FA14609F8E4246FEC475ED262E03D30393C78C7828206842B565A
DBE20EA52EE9C4C3862B2F5F12CF89D935B89B84A45CEFCEAEE8EC8806339364
56FF1FE2E5112803E3E40162D5188D2210A54816AA9960611721C23A292AE80A
8F8C0FB114D71C111700B0FEA8804F37C5D31ECD7006603C53F4BDF7208286AF
3A25CEE58E88BF81A4800B68C2A19EBDADF9B1074702E779A7DD915EFE09D35E
BD176D7346D859D0944520171C4E97696AE0502C43C391FCE5E8FB1789065E18
BE3AF62200D57912360411CE848B4550D1B0A3BA576F9B41CED3A23E753631A7
25375ABE8A4B55BC65AE2EAFAE452766961965093084D218637FB447795CC991
EB1EF26BF82B7A81FA847ABD3B559D35828AD7DDC5FC7B43C6C14E6ADEDD7663
F272AA9A121630C5263D58773BCB1437EC2FC54C4AF90E677A8E7D1738D003D4
18998C03CC9AE182E7758767FEB5E1B03C6CC32AD30D0ABAE6552290771E2CB1
A23F469A8447C1868C6DEC2C3C2BCFC691867E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI7
%!PS-AdobeFont-1.1: CMMI7 1.100
%%CreationDate: 1996 Jul 23 07:53:53
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 99 /c put
dup 105 /i put
dup 110 /n put
readonly def
/FontBBox{0 -250 1171 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D77639DF1232A4D6233A9CAF69B151DFD33F
C0962EAC6E3EBFB8AD256A3C654EAAF9A50C51BC6FA90B61B60401C235AFAB7B
B078D20B4B8A6D7F0300CF694E6956FF9C29C84FCC5C9E8890AA56B1BC60E868
DA8488AC4435E6B5CE34EA88E904D5C978514D7E476BF8971D419363125D4811
4D886EDDDCDDA8A6B0FDA5CF0603EA9FA5D4393BEBB26E1AB11C2D74FFA6FEE3
FAFBC6F05B801C1C3276B11080F5023902B56593F3F6B1F37997038F36B9E3AB
76C2E97E1F492D27A8E99F3E947A47166D0D0D063E4E6A9B535DC9F1BED129C5
123775D5D68787A58C93009FD5DA55B19511B95168C83429BD2D878207C39770
012318EA7AA39900C97B9D3859E3D0B04750B8390BF1F1BC29DC22BCAD50ECC6
A3C633D0937A59E859E5185AF9F56704708D5F1C50F78F43DFAC43C4E7DC9413
44CEFE43279AFD3C167C942889A352F2FF806C2FF8B3EB4908D50778AA58CFFC
4D1B14597A06A994ED8414BBE8B26E74D49F6CF54176B7297CDA112A69518050
01337CBA5478EB984CDD22020DAED9CA8311C33FBCC84177F5CE870E709FC608
D28B3A7208EFF72988C136142CE79B4E9C7B3FE588E9824ABC6F04D141E589B3
914A73A42801305439862414F893D5B6C327A7EE2730DEDE6A1597B09C258F05
261BC634F64C9F8477CD51634BA648FC70F659C90DC042C0D6B68CD1DF36D615
24F362B85A58D65A8E6DFD583EF9A79A428F2390A0B5398EEB78F4B5A89D9AD2
A517E0361749554ABD6547072398FFDD863E40501C316F28FDDF8B550FF8D663
9843D0BEA42289F85BD844891DB42EC7C51229D33EE7E83B1290404C799B8E8C
889787CDC43FBDFE1B4A245C9AA8693DE3556FCF9B557E2920FC04A91173BC46
5563D38ACB8EAA658A3EB230A3FBB3337772143549A2A6CF9A663ADAE4BC3FA2
8A8A32743B27DD211E51DCAE213DEF2A8D4CBFC2539AE857B06E9DD2254A2FF3
749025C048106CF3195364E36978FDD1CD5BFC7DDB10982348923B699B387D92
461DE6D53E896EC07F9C23D434F46A115FA00CDCD5804627276B51CA0F13F346
EE74FA1B22B1EBDF7B7841181590D392D0BC1C0651DBC8DF8CC4FF9288067448
CFC46E6E5FD0DAE426D77E80B425DAB174EB0DAA7D3D68BD2FD820600EDA5BEF
A3B8C5516B2E399237AD41CE9B7AF0FF38DA7DCE4C5AD333D18859B962D6F756
A18B4EBB08CE929EAEEAE5FD8F447C7C5E1B5B91D81B471876881478090CB1AF
05C84DEA0C0E65FE6BC6451161BF00177F8EEED72A6468010F915419B11A62CA
35433FB66C2C180CF87463C9B2C3B89580A16F0C695F0D6B8E74BB2DF6177696
2E8D0EF039512D491A9C9DB6653BDF969A093B411B0C5137F7790B71CD7D739D
5780F49065DD36D1D9046393445ABE520B3F8EB307745BD52D13D1B6DDB11332
6C1D5FA3C42BDCAA81793216EF00C14E80109BD1FBDBCD01AE51373959098789
804B3580B52AE9C4E1E3E58BD0EAE9F6798BA93C3745D5FA2F16938984AD3FD7
591BB5ECFBD5668C2188C500B24F995850F3E8531262B78C3F0E328AB40AEE5F
663DDD73DD9A99F5D2BCA58480A8DF793989B49FAD5D188EAE94C9273C96C989
03B110FE2514E2E1661EF53C269A2F3296123735B8B91FC2361D402C84712BA0
E59E2D03390AFBABE854186CA1EF43DBB4C3D5629EDE1E6BBD31A0E9F2EBCE42
9E1CD9D924EA232A3CBA39EB8B9DCF7025DCB79C05F1373DB9C01A1AE5D7792A
C0252876EE90C323BED8DE22AF47BF8BAF4D93AD7FFD94F3CFBD3FB6257D6D06
E6B7BE40415E9E691CD1E200E3F580B1F1F74F5887E32956B5BFFE0819D56002
3D55B761D38E8CAE6A89A694EBFA8DC238217B12538C876EBE69545C8EFE0D6E
239833D9748D4D79C460C5F5801DD1AC45655420739555E6438CD95A7D055A95
21BD22DA192645448213B691E3DF787EEC6E10E4270917C56F84447E6F76810D
5C43D7E07CEFE8D56FC930B2241CBFE455C73F4184BE297A8C4CEC5A21613DCD
7C04D4318043F0B0D452C720AA9DA848607B97CD238351C973C8000891B91669
4DF709F749B75DD8B39D3FAD8AED7651A381BDE437E8D31214FD42DC0F9059D9
8A1BD030C26768E189CF8FF60A04F05709A72806263C76C3D1AE64A6C6C2DF33
206FFDDA52E4075CB5CDB545A890F55D27D606583074DB03E3B0D7636D55BB2D
89B571A064BF7DAC1655DEE2CC39DA1075CCA20CF3E7F0E5F4FFA1A5ACC13B81
383E1A18F980FAE8AF03F9D1FDB793FD9D861B94B9803EAF74FE769625B4A2D6
95E4973F1DA87BC8F50B891AAB5340AD6A61EB1514EBB78C7D17F748AF5B4AEB
A4889E5CD14AD11AED769E4C6CBD35334B2E322DF51A627AA6B34C52FA07109C
E149953C28BB2BD18ECEF6779D426AA2C1EF0D607E1F38C9BC86B2312E3B9585
A439197655EBEE3A74D1E7B19ACBE72FDAF9E2EAF42B75380504359C052D5685
37BF670BE216DDB09A33AF7E53492B16CF3CF454D8858809A3D6F0D781D3C256
E7936E48A9F8B2EDCFA936D401D8001A448DD7627950D2559556A669D971B16E
DA5660F378040DACA525E17F28282AE2EA907077811F8A9DE21C07A07AAD663A
D13EBA437F0374D7DF512462C098A20D3E51B656C409AAC582E1F766DCDF869C
A88729AAECA994DBC3B8F0A595E1AA592928012CC03D49A2CAB7A1131F5FC540
2A84F9060C6D29AF6792FA170239EA48176CB38CE08CD972E970F8AE6D2BF4A9
6D3BE6B87DD2AD4FBC3B9CA763E849C192FCB77EB78EF3D904A0A6F924C6D652
BA46
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 49 /one put
dup 65 /A put
dup 69 /E put
dup 79 /O put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 120 /x put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7B00AD58FAF645
1297991B5D01701E82228D0313FC7C66B263BC79ACDDF9AAC48A3CBF42B96E38
583E1D059953076D68148DC8B6C9527B3A74CE7DEF788A11531F44120BDF0F61
0B2F3ED94EEBCDE4ACD23834C242AA4314B9EF98E4BE72DB76EBDD0A028CEA9D
B4C38C1F2D24B8FDE686832FE96204552C820E45B6BAF0C3308742AE286E8AD0
B5E912DD767E50C4167D21BC96C4C402F476C179898A7AE0C2246E45CC90C841
E43687687AEC4E71F050704A0059619E804A2BE65F31466795946A6A23F1B6CC
70B2D5D8E582593A4EB9B7BB08655FEA379784F481D94A44A076B036C089A0C9
4031F5D6C1A1D17F5B505819C7379DF41CFE87DDF908C0CDA6FB089CC93B3677
89F4AFC738D04A5262B0BA01178D217F4DC3D81CED774E74D08F60985DE9F96D
D65826A2D1284C75FB3FF54231D32F205B687611E5FA61F98C1B34CA4E44460C
E734B06D80EAF0F9AFCCFB231D09054743866802A80C3176533025EA02D77456
CBB0FF5B59EEEA6730B85DBC3FD3D321AA50B71F3010FEA1EB89B6E8703669D9
31B9DD8D2718B6E47879834B349850AE11E6B2AF2E9665E28BA4EF7EC5248CB6
68809AB93E3C0179269488B553B8B2C2C77BB169B4ED54D8D767D8C991C01FBF
29ABB377F0D6A9D622E44FED54E654FA688FE55A7F144137C1BFC8780B35ECA7
D21D5F85D8186EFDEAC90A80891A59CA6C1DE555357402452824C98CAEAE546D
A899BBAF3C01D8B07C7513CB785688E21E27589BFB8FAE70F814154F6F3A73BB
3D251113180818B0794653FC40773F636A78DE7F6CCB212742DA102377BD6632
98527DE8B33FFD194DA59FDABF8E5574FD4BF7262FFD8D58AEB54FC959F9B2A8
3158CEEA18B4B51672F5198CE3BF6D79DAD19D74B574074FE1FAA937C4884E97
638440CBE6837A31AC9400434A4D13A7D7347B199F772C2A639135C17DB097A1
10D56A77CF5EAFD37C29F8A8B64241FDAC71149B2F31CE477B90F2B71BEFEF50
76A0172B5720E6D8585F8D302CF6A3C3E5C4E2CEE735691FFBB1D06BB85F7DDA
EDF54CFA987FF0FBB37C287B39015FE33001F2FE31E991844F28169ECC62DA63
690BACC32EE7D0E7DAB14BCC7F52C010966710C03A30BF74FB60C9D49BFB7EED
6DBC031AB5C703100B068DAD1227690D0049C3160ADF37326CB3D36C5257D7D1
6763E644224801DCEE63B82FF244DA543798DA6DD3C6FE4BEE51F2453B059B9A
336FE435A2977E4FC471A41268C84C0A3BA670299A9F20D83F0E5F5CC4232C10
AC022ADFEC430698BE38739026B8173E3CCB60B29D7621CB8667454417A4D3F1
4BF37CC8BF37A561639D4C7881E098A92C7E36CF1074331285DAE26ABB1BE1E4
89D378B1A31D6D423177680040ACAAEDDDB7ECCB9DD79E03DE07B5F076A3455A
CC5484AD516FD8389FCEDFAC010424994FD17331413140FBBB94F6839CC800DC
2B533CB465BB1F5A54761B270B295E18BDB886DFEB932642BE2C5B254FA6C1FD
AE09B98AC6324DB82AED0473234016932C596158D838D047FE28811DBD81B4B8
3A7CB3EDEE2E86356058D8D1A653615AE60958D4171C58CDB17803BA423C9B3B
C2A0D1372C750257F213F0D145EF1196F30690D0AE879CE12D43B8C9533D3797
484D7AD11E861EA40AB8FEA3C6CFA9EDB7435BCE93E2F16CB99CF2062E11EBA0
0A004CFE400101BCFA74A9D37DC68485452B4DC4A8CDAA582A8BCBF98D156B08
DAF869A9BCFDC0517C59C97290B11BC8EB4B38B94A9708CC46D47B6D1DE528D3
DAE65783195C7C18BA8B561D4AA992EE0DE2F69BBE6DF5546C00EB1FF854BFB6
AD0D0FE786371E04E62DD9BF2B3741E71061A6F0FE2A264B1E2DAD562A9ED8FD
1F840D0C0F478D9EDFECC2A1B259DA314401A04D29A01BEC3BE5AB2E6EA41B41
9450921EDD9290F889677E15CCD9B7C30BD13D1822808E4FD53242EF423ECB64
2B8C8E3624BD77296626B421960EBD1434D1AB1C98C3C5AC605A7FC29E8CFB06
BE53EDD15B73BB51AA7CBB296C6E658D51AA95C5EEC91A597EDBF37A39822A47
B52631F93FA840B49329F9AB48C2A75C645ABF8DAAA0F995A198A277520079E6
25ADC1B573DC35C6FCFCB363065163E472A88C9BF23D9C836FBAE4595225EE77
2B929604C35B8442639407F0E7208DD2EB19E5FD08543DFF67F0C0D34F8CE28E
6E6926AC53CF9E12F500B2DE8A48A32933C5B33130F3E56F917EBD93AA51EEB7
EE546D31939B21F90699AC8FF1FCDAE50A86675E72C011737D55F81336298222
0A3E4A546F1B14B5C451CF7A5659C2F3C4F20C22BC03FE3959CE13CB03A07C64
7BEAD756FEA91EBAFCC6DDE1E0B77B8F68B82E62C9756A685C9CBA0EFA2F9FFB
D29413C4D11567D99C6F17B304CA95A079C062FE04C4A69AE3E5A9B5F73D59A9
3FAC0DBE5F29CBDD762885D31F816ED2D4DDC2039ED964F4BC10E031BE6C5FE7
1683894A388429C19A4E78A139CDCA56235375E7D73E5D0F4D7C0E3E389F1B87
FA0D0411FB4FBB5CF85940A2E1C123D7C93F355E7D7B56E2F52AE52DB1162D15
50C11503CC14D8A5652744E53A4B2E6964BF3C2F801765FB8C97FF480FA30E4A
5144A5AE5943974E27146C65EF82E587A9913A94688BCCAC6D237DB24B31D2AB
769909C1175390F75A5E79279FE8F631002B1AE14A39F926FD8C22BCD07F739A
E00F00BC199ECD532DE4C46DD7EA7C2B8AC86E6A0C99DC4E83324C9833EC9E51
19394C281EBCA31B4163567B0D6C6753A2A276E9B78DFF63DED6BDEB1D99D107
936921FD147750B42C5918EC3A3C2799234B62003D27640515657BF54BF39D6A
374DFF7EE176DD375CA1EC9396E29AC9107925B4ACDB5B2BAF2574E674F885CC
647C9093B79B2665EDC9D897518D796C8559B719831C6BA289082C2523A20AB6
A3F34D29C0263460B8D68FB71CE6308781F7136F1B6B0C67B52C6367F361E3AC
EB6AC3C6215B08423C256763E4E8CF316CF2EB1D3F314BC7B0B2A8584D2327E1
ADEDB3B7906A45F38EAA9C273CBEDC41F8551A1AB73699B161213B88CA874FDB
87486D6DFD29C300D566088EB75E4747A4D7B5D74EB4AAE5BE9866135FB32AD0
F8B25DAA2DF9A42BCB70D679249C1DE3FECDB0C4D26197F81791596050EC2BF7
45480627A09DC4CF282B4E6F16D70F18BFD562281DA96256C01CB3EE74D996F9
BD0384A6AC5DDFC52920270C1909DC905E3437D65C168BC22FB2E0C9261151C1
085B200EF1F0FC082C63278A43F19419B592A3B0DFA24D5FB02A604458BC896B
D18B06998CCEB4F84D5DB27592E1D4B086B09EBBE1F7A7C486D75D4D34717E1A
BF2041646541F6CA3C90DA4CE526955079C66F35660D09F0ABC002D65A14E4A0
F83B144DA2C9B09FB2082A927DEE2FAD07E40CFE5D8FC976108A7B991213070C
D32F5755B49BA0F5A111D9D76281611B715B050DBB0FD0F6C48D3E0A11CD02C3
C32B975C8E4BE4A9F7581568872D80216B5E9940C541AF310DB4C3915F0BD764
10E758594C6091B09F4869F6AB8090FC7D5E1E0B656D5908102B9224A090C8BA
CBEF1F60C7AE0E9177BE3AC92491F4BD667F74967ADFB9AFA81131D642789865
07B719E80C807EA91F3058E957E2ED447DCA76E82F1D5FE6A34FD109538FD46A
C0E26264BED21A952BFE7EE3EAD09FFA443ACA8615408D5DD91E66141DBAA2DC
0999821C8E195432EA84E114CDF9C0ED696CFA15ECC6058D9F1AAE13A5CBA357
4EAC342A5D2ADC10874C45200BF0D250F9875DF964DEE9D6FBCF85A847C735F0
CF4EAF182911254381D3DD5DC905FA38F61EE7E003D5DD1BCB9C304BE4FF54C5
CAFFDE47BDB8292A38404FF7EB9FDFBDF7BF3174C405F9B0C7D6D94CCD8CE606
28220BACA0AFBEFC80C43404F75881B7A6F399E93811035FA7FCC4A8FBF14B56
9C4E19DE2C17ED5C5C22377AD7F5E31852CDD72DBC13E6D1949B549FC41E767E
0E30591C32CCACEC454AE7E6B8548E37D45B03B6E4B6B70434A609486DEC19DB
61EFD149F0DB005B50D88CC0178D944533C8E3FEA19603C7C71807BEC407BFFF
F1D2ACD30A86A5DE41D31BD10254884C2BA2E44F1F835D45C9CD9779F7CBDE86
BBD0A9F64A9CD83A60EF6EDC1AEBF89CEDB4192B0475978891261EA8BF8EBD19
6BDBC1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 58 /colon put
dup 61 /equal put
dup 67 /C put
dup 70 /F put
dup 97 /a put
dup 99 /c put
dup 103 /g put
dup 105 /i put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 117 /u put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B283796A9AD847424B4E6508546C36223A3B17EB82A56592F27FC27
F1D49D5FF4BBC0E16231807AF7E195AA7D0D01C7566243448B222D57B811EAE6
DE9370F84E207DC9BEC731AD6040FD9B804FA14CA264B73136F9AF34390319F6
A543D5D4D7FDDDF2F76651E557683614521110DEC1CCAC426117DDA7D6CF1B8B
7879B21FDC78BAB3C944BCDCD6A65B67F3692F0A8D5E36FB783A63D4FBC9842E
2CBC2720A7206F42A99AEC79FBBA92A27965AF40A71E05E4BA8D7FC58C828226
7A8B47241F73590CE626EDA930A1D18D758636250D9D6A09E133378CD725F586
F40320EF186DDF87AF8C2F5470EADFF45B230623DD994111A1E8B4BFF9EAB5E6
E856EC1245CA3AFCFCF6F396CFFFDBE36B49D9C362DCE2AB872606153DB94794
E08B2D606DC8E8D447D5FF7EA0CB990DB940A5951BBB6FD4919B97FD653F0D10
2D2B7A868B757A68BFC53ADF8F88D7F4844A8FA4414EF33B2816750CF10C2510
688D9DCA5C19DACFC81E5E9F5BE0B89311C8D330F0AD6E39865395536828DA89
CD911522CC273C435E3D5D1888046B04E77002CEFCCA071BFC705F51E4142EB9
C98FBE9373D36B27E5C562AEA78D2174B4730947637701EFBB2FBA3063483F9E
84B361157F09290D30732970607C7D61AAE6F23C168272752435B04A2885E1BF
5F7660FCBD590ABBA7581A1D96EBA0AFF79E9AD6B7CCD38E558C585E1BC7EB6E
F78F9E22164A3B25628C200189F367309B3EF142CFAF4290F2BEFD8C030F577C
091CE0F82D95D2AB8451DB683159A3936FB6C3E3E108892F23FEFB203990EB6D
DF34E806EAB6454D013E7A5B5B80D2AB6517C046F2C49EF493BAD3764B75D29D
71FC676F4D0AAC8112B20727A4CA38A6CAC4EB1DE7CF814CFF4EBC75A6A9060F
125DFD960009A5285FEF2AE908D08F1A59C40A58850B03206D85A3D447A4D946
BD503062DED9A4E6F58599FC287C5803B56F4058A19FEAC02F63B3708C71B91F
2F9CF54295649CB73D27AFEBD51084FC653EAE2C53C5CDA311CCA88C2CD5D6A9
73C98D881306BAA47FB937A5987C43E34B7A21AA7D151A5AE07F302102312525
C3F9AC459EA5A150824EA84158CEFC8E319A9B3F3DBAF7D950B6EC925AC28831
C6520B66D52D087A2188BC928DB56231BEA4051318283A3DBF214C2546DB20E0
30EFE2FD9EEFA7FDBCF2A5E8BE58B9EE332078AC6FFCB8430E89E7DBB641EE5B
F1502C8FD46D66A6DEEFC79D8973F207352710562BD71554FB815613686CEF96
88EE86CF972CD76DD8C2529972133BE74E24EE41CC8B2C3C5A9230D4D8EEA67C
712322C26C0CE35D5023DCD122D075D99E42DC5A38BDE6A3CDBB0D1B55F0B863
8B1981DB6B138EBA2C68A780A1092662027CDF74B9059BD76AA3AE9865ACBD1A
A1D0339259308CD2640B58B1A64D423B34DA4FE4098C6277A21B3AA6BF992109
D613CBC7A350B3E109EB3153FF35E9C685BB9CC95C6442C93B9C794242B7E885
39948094C4133B342036B9B8D428CD52575C2185A587B218A1BB3240934D4CFA
29E239A86FF586C73A577EF9EEF3902CB5C514FB7F4346D52887C73FC5CD4B49
BD211D77D049D0C84AAABB2D888D9E1B7B9D042813E7161DCE51CCD00496FD7D
EECB732164518E5BB1C63107A5EAAE6F5D0D86D607B02D8D91B6B03086604587
1A863C0CD3025F99E9B0E78F5C33C9C8368D9EE65A1E32ACF3AF4BE59BAEA0FE
07DDE10DA38C7CAE5FC0985E727F88AAB67046801550C714518B25ECA874B7F9
105A1E2B577E508B663C672824306ECC674969320ECB1D771A4EE0EF823B5013
81688712128610EEFB43945ED1C5398F00FCA2E6D9789CBDC3A077E5E14399C7
18203DC9A9B1581BD406FD1B9FD6A4E0BB1C7C27A75A1B909728B5C0D50D2481
3DE69192B2677CDC9B409AD7D077C6F7B446A5A7A97C55555AF1B67BC635F1DD
2DACA1F44CEFE61F6A487CF7BCA88821237564B9F3F915E15F8DDB11432A83C4
1B9190EA58FB5973E6F194E96F44FE0C979F78854161B243154758A4CDAA6182
6CA74654FFF305B2D0DDA7761551B881E08669931ABD225115F6C7D55A127B6D
CD938064C10B604206592E7D57871E28399A7133F4DA7BBAD2509E62CA06AC99
8FFA76786D95E9BCBFD14BA53074649863268AC9432E9069C91E9743C0BD5721
17CDB45AEC0ADC1513172524CE752B7B1C090EE448237C752FDD8DD9EC928C7A
B2D68F596351778E9DE4AEC48DE7BCBB7645227F07C3DA2A689D5759E3A7C2BF
1F2575F050828AB43C27C1150B5B68E2D3F68746A04C280EC53712E60B685023
E967CF4973ACC053FD5E7BA625CF72DA6DA26591E0ECB48F8EBB2188DE8FD655
768F00B247F3406E85B2924238449B8A7628E83B42AB92859966772C13FF129D
EA635F3C0533076A3E12E08F50154001D808F55C71442A9DCF28C09AFFC9541A
9DBF0C56297C56D5D446C5E825595F0AD32A8EB79349E1533243473E532262C0
B618E8B53AA7885E46C7631408F7C9EC1914485D1FBA4581B8CCE3DB6940DC21
6F09CDA735E5122132DF7EEEA7C972051378F761EC1AFB3DBFA18A20FB5C1F01
2664D24CB42F0C6DD727DB471F326BBF2C6982A7E3D76261EA89BFD0059692E4
5276923B59367149ABEF03F47D66F200BA58A51310BC3FA33F81BF21C4066AFC
7BAF4B20538A1A55EC23D63D4A4C846A7D5FE91F46FF9BA7A70E42F7DB72A0AC
B1B26BA6EC5D2C8C98A0DA3FD77A2193C4096D21C9C6CA63637BCDA537AB065B
BCB5212A943BC6DE63A6327EB37DE6DBA96ECCD7898EFC23522263F85C97326A
481F37B3E5AF7FDC57CF0F2E1D25BC91C1DC226766A93DC1B4AA8532C8AD5317
FD7E5B6C5B5235DFF1CBD53908AAC9021410FF23612E8BD9C2A2A587D38BCA14
48D24D61501BE5CC1667A7E4624FFEB5A24CB679C2F7B6247842DCF7F27D1AFC
D5ADCDC8459512E5908DBBC0A9ADC7C2E8229637F889785F8118455134838CD2
3047397C466F7ADD248FD11E2C4C48C590DA8EF38008A94A05FDBC5D954D0383
FBEE3B6421393AD66AEAA6FE16D8FE4DD12C5FD9A2712E83FAB2C139172449FF
68D46C77D046F74F399AC296AF59D1FB2034C5B78DED24F378025373373D2827
F5858C30318233A1CBC26EBF77C643D9348A58AAB6D6BCDAB987BBB6350CB1C5
4BD521D8BB932B7763D9BDF5892F6A9D0E0F6B5CF28A70EEF2CB35AD483A4749
CC8F597127E278C19D224682DC798E52384A179447E532AD1257C49039DD8324
2D262442852412DD65ADFCED5850A29BCFD4A525032496EEAFE345173F486E78
DC8331CA6A1F3CA44F79D06760364A10168307B588D99E292310360DDDC5DD87
48B8F2D4B822B6281B2B5AFA3F01EADA51251A9B5DAE5B6A289AAA59369871E9
407F68F6AA3A6A9AE57706DB9FF96AAAB5AE674EE91C9AB26CB149014BD2AA37
2D314AA5CA962CF6A2C06EC046DDA30E6C143FA59BDE64CCAADD2C163E9AB499
B9D95BC1D64E15AD2E148DFCFDBC3C4A367AA40BC9F437AF0A8EDF4E7CCAA028
0D8F3F7027AA0360D28D785325711F127D7B1B6083E661FCCBA82DA1BB0321EF
9BFED61FEDB92C83C651C8617DEC73E5F01F457B30D5D479186506CDDAE9A502
AE4903D0720C6F363F8FEF2B0D5F485BCD2E2BDB03BE10700478D673F0747E0E
70298ED8F29E95D40D2048A39A6DDD587995C7174E17A13FC940E74B3F741B84
FDB0307B24E71A8CF3816D391A26D4BCD722E24C2E04205B8EC584E9EA5C9DA4
E838E7BFF284EB13980D891FC45E347E670EAB341D37DAB466F4F8D579499B58
F880DB5B5D6E58E64DB3E57A1B00B238BEA699D15449BCA68B5A3A07F2B69115
57149E24D3EE5E0B226736EFFEE87CE65BE5A04BBBA142C830CA5479696E01EF
C9ACFADBB6C9BE79DC17B0752FCEF32AA68A7C195147C866A391C21329A95D8A
7E638F6B8BF48D34FAF89F15513825CCD21C6359B96D0BC162EF8C818AE1A145
466C560E21698356A9F962BDB63D667E465ED33D4FF442F459578A09C174D3E3
D48F6F206121E2F166CFE7856E3C3A3B4D62C067F3AE912B7F6CE7819FAB9F8D
208A2F7A92ED61760BDE2412DAEB2E5C765E006F4B2DD393E7BED494F981823A
28D9B74A94E6C75A14A9DC205F980723972296889892B35977417642D5008A15
1D113F4E483362F39D294F9A0BD2A91D74001A6BFE01CBCF136524EE0BB8F54D
C2D9BFC6041DF030B7B1B1B96001B332DFF89053551F753E3E78C29F2BC72B1D
04584A0B540AC836D5052472E75120873CDE803C2B765BF3ED1204973BF3A939
508BA2DB146421D66667B157A4B1F17DF3E597E3FA0AA14AD73D50B671DB873D
0887D71AF6B28EFFDB177930E82B883E6551F00D026C84C2BA34BB303173A010
224ADD2FA5B4819EFDBD6590A0EBEDD06604E2527997B451F6EE0145D0905AB1
E7AF4D7456A23915FAE2986F45428848DCAADDBAC7ABB502352A83499BC9DE41
FD20E8B78083494E4931089A54172EF8CC71FECB1BD44F1589E95D36049EDD79
C7DCEF14F822A53B1B6A3EF7A8DB4F958B6F8A33098ECCA928A9C65DA01751B4
793C32E57F8050A7D1AF53D1074EC42BAAE2C1837FAE50ED53EBC0BF14ACEE2A
9F7AA6DF0BD1C2EA49FA60A67A679DC3C601B9E7DF03BF4061853C55727D1642
E0C26E38DEBDAC0242714081E9810CF449B8A132D05502DFF5C7D892AFC08990
71EACEF98CC2BD25EE03B546735EBA1C300CFD5A51053010617B8EC9F9D67F21
57CC16675E0FA44EA3A5D4BD7F16B625DC052C2CE3B45EBBC9147FB8EC51E0C0
BCA6497A6B56D511FC2522BD32DD7BC2EC9D678EDC384F2B6BD13D5664F1F116
E1C939CCD949B4F2602CEDA99F34D0522F8419BA4C6F022449DDBA7E3051512A
C3840E3263C8576E9BCAAFB511A6308C3A695F07FD4457004C2278CD8BBC1D02
8955D19CCF82F666DA94C1013CF49952E5E38E821B94970BA3CBB20F564185FC
7C1B4A3D18A115791B5AEE273F7354102C5CD8F6CF3811B24E14C650FF2866F5
BD25A8CE128ED29ED37725FC8679667971FA6E443669B91D2F651DDC8FDCFCD8
92
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMCSC10
%!PS-AdobeFont-1.1: CMCSC10 1.0
%%CreationDate: 1991 Aug 18 17:46:49
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMCSC10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMCSC10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 94 /circumflex put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
readonly def
/FontBBox{14 -250 1077 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A30EB76029337
900ECFB1390CA5C0C3A04528044F266BA17BE487C79B94FAC6D6484684C5BFEA
87BCCC77D40AD11552035E95E3007126418ED49B68468B38A14E88E68A267B98
076F1C9769A5AFBC285E5B158EAC9F926F1D6C0B8F1D57D9C31D25AE27123518
9D2CD92E5689E0213089BD268DA5E47525CB8EABAA4B78A15AEA34705889AB3A
FFB8953B5B3482E52BFA0940630ADF8C0AC2177D907324299EE980E850F203CD
B627962F43D5A678C44243CDE97853BDC6AB45FD5C09AD274DAF89929F583CC9
CCC24BDFC68B92111055ABA5F26D2DC67C70906F71C2957701D65AE746A60C30
40E6CB24B97FCDAD0487AE38A201FBF0E41BABD2181981A71940F1E707F91E5D
C8CA50CB16D8702D188E56D014D92F76CE0B52ABDB9110E32438D2BBF3E6A40B
7B005F10BB437812CAC6ED2996F7606DC962C4FDE207FF322782C343DF44CEC5
FF06A55C630C20E9AE1B0D1C5673753C43BA0767D65D1B451CC6380D8BB3C4DC
81E8FD8AA79BE993218686F29D3CD925566DD587F541A0DA1B1CC3BCEA2E6C7D
5E1016F6917A871F1BBAD96AF9E867735017119A381FCF33EB2D3E1E7093FD90
CDB0CED4818CFD9E201A03430CEC713620BE0D3254158931FB657C6AD4B2482A
0E7D070D7497892E9E942DF58E88CAF0C8221BF36BF7C435BF2C683A4A2EF4CB
E85820A8AD3486155A40143011BA9D76297F46DEF69ECA4596D6E4CAABF84091
22A96A4BC78A8DD072FEB759A68A44BE1164638B6D952147EE3C628F9A022060
1D1941E73310943FA782532ABCCC88593FD63E7E2CECF6665C04DB48D641ABD3
AE1BB468638681E96394B9E7BED1D13E534B897DB90EA6EC706BAAE06BE2FEFF
1DFA5258113E9B4CD2D36655973864574E0E8D6291E48A8C62203F679B7ED838
6F7CBD523C2943ECA994CACE6679ADD23290C50FA5ACCD01D64928BEB3E5BEAB
4132F0D81B64FA3C84FFFA3F1C32A4B5341A3737FE0194610713246AA4E435E1
B7C6B1F344E1623AB061EAA089EEE8389BA6A7710AC89B4E23F6112F2DAFFC01
0138ABC7FC6BDFAEF4FC8A3F717DFA608792BB0A9A4710C6B55B92D95E40517A
931FDF6CE8A4B7F8009C5AC75810F22AC0F6915A65EBBF7B3F84F92741816F1B
39D3101DA262EC328466291E1C6BF96D5534E1F9D0AFE99218A39DC0837F440E
F453D02C1C5F8B4DC3D785C55BFE5E7F6AFD441182B87F74959FB8E9CAF349D7
E10A217316FC4BFD32345DE3677CDC4EAAD4E719433BAF3ACFAD060A436DFBDA
8E5DE18C6E0FE7ADCFD7444D71EAC2E03B286AF31A53B402CE491AE90535237D
67C398EEE3ECABD5EC1C064B791F5566B8F46CF03EBB1728BB56BE4F7DC6E775
CA9DF94B311AF5F2546FD2A71A6B9CA0B4537C35B8F4D1AF3ED4438CCC9D9F21
05203152744C6A65D22B64D6552A462DD3D910F00FD4B4432060A7B6C5CB7B48
B00BA13732CC7BA433B1A79893E8057BD061899E73EF7A9C79DC9FA31F1EDD6E
7F4C0C91382EB5BBBE476C031CB8B4F7BAEE50EDEAD1853158EAFF77DF46CBC3
968165FD257A5324E430955748A1731ED9E04F61B7A058B340FA3FDEC5DA838D
3CF61D803869111CABC5DAE68A0C123801FD8F6DE6C615C40D31BD19F228AEB1
B79AF79361453E6B1A6E98942EB8554CC66C7B86005A313733984082E1DA75C5
98CACB5EC6E26755247515986EEA3884E6F96DAA4B15291ACBA34EB1EFD74BAE
9C094501233B5A7E7F1E66F10C14FE7EB7CFC19A5A657E412EA7C9A6BD7E7348
5284EC7C8272B79484A41208B5CDEFDCEFEE8476751D7F33912A7558222FF5BC
C78664299E353766BDB60C1C4145D09D6EEE1DD6D12AA68525CCEC135A2A1331
3293F00428720841A0DA2DB07F5140113C52737AC2A8B3980F70C3064BC3EA3F
5A13671F81DD1B2C480FDFFA41A04F171C318BFDD76F7F222A2DD4D378D2D799
F6F00A356E3D04CB49C0E51D37A4521B31F877C6F6E8E817C66BA5DF13DAD353
332A9BD074B03899CA11AB6373FBDDDFB01A4DC9179B2E9B3E0E950AC6ED975B
35538D2C9DC750CB8AC1F7D74BBDDF5C23BB98B56C9542D002EB87EDBC5C80A9
AF6C14DA8EE957595ED588C32D7D248C846AE1DD7CFB3C536C8717213122C3C7
182AA8C45055FBB2D69E462545FF72670454A55E53BFCC85CCC50FAA84C05A78
5AFA3F656FE2064662DE625B4FAF1E7FF658F9712F263A832A1AD0681C20E747
A47F64F51D479244E3DAEFF48B2DD018983A895E9F21ADDA38EFA53628DB7CB4
A8F1F1E30813503A07777762ACF0EBC85CDEA899995A03D52E718973392FAAAC
61A3BA6ABF55E9D297534F6365532A214D046572AABE98ACC91040E3D145695F
2E9E135987A84EEE017FD1C3BC93F530EBD1DCC336BF65BDC8EA56014DA7647F
AD3930A9856A995332D17287F855BA351A50F7739AB2DE623487672B3E4435DE
5721A9671D0594E02F6C39A13C0D79779738676A4D6695AADF2B82BE9EE13BAA
93A8D77FF302BBD9984164E23E20332107A655DB4246A135ACF5CB0AAA3272DD
FEF1E4101B0FCFBE1D170CACFEA35BD53A90DBFCC2A5949FB666FCE2C3038FDA
0D863D6AC9C9A1FBB0DB20A1B187CF88DB5BF12F9A7F79CB86282EF625C1AD91
EBB85604E339C5F81C2004DB879228830BC5E33D219BE5878AF9F0CE01F9B41C
02100CF14E606C35C6B077929CB839899BF72DE9C30F71F2BD2454B19A5B472C
DAB6C2943CE9D3DD5D71CD4061866978E19E7E2FDBFAF1B57AC58B09C1EBDB9D
983E823B6F188FE867EE96833B3BA05F8B1F13580C3ADFA390E989340D10B0A7
A154B6802619CFBD76F99635FC92DE576FBB92DFE21458C11DC479D74D2649CE
B60E9CA34B7363856325B1398AF464B03BE6A9EDFF2397FAC78992D92251FFE8
E999DAED326E688E563E7978D6FFC21BD0569E36D39DE4EBF5088385E7DF5A6A
66CF298A78B36FA6F4204701F9FC2128E4D1B8296D715271E6845BB577509570
A4743FFC40DEA80547BDA55E02D27CC934E4D6367D1489CF4561E9B566F9A042
70D6B31F35B9F4B67209E0A98794A607628BF92A4B744570C92E03C0BE70B41D
9C4CCFFB5A6E7EDA1C0E9E789DE8F97A642EF93E73638A66FDC7B051C31CA6A2
39EC47951DED693578D42A8612B49A5B9FB0A9D19FE9D20DD16439FB53BAB110
DA835309B89D7D41C95EB0B97B11AF08E77B9F3214A9E4A894784219FFB5DD58
347DA9F4782EA10D32BCA36FC0F1FECF519AA5F5957F9B683CBBC38ED1315A57
2ED417C27B0EFDCD4B732DE9A649535803E214CAFE2065DAF2AC8AAC5E1F95D5
4BFC49696535501955764ED929F569B88617767268D467DAC691127547FB279B
28716D02F36703BE9660623B1D03C15BA23CAA8F279F041D2CEF0E570230B4AB
691D68FC36AE7CB08EFE7FCAA5DF9F19DD9B4E0629B99DEF1F62E8BB8C1C4FF1
F5CA2B2FAE02647B3E53FE427F7862D21FC005E7F36B3F16A682F358D71F3A87
7BB33E67CD257B53C30537019A11745BAAE4ACABF45C9AC1DD042F40ED801AA2
C34E4CCB18582DFE548BFFBB02F1851AACEF35C8451CA57B9253E412894A8FA5
F5DB3E827F2D793DF17B41685A417E4E0EE67E7C0E73383EA6B3ED60D44883F8
41E9A2558FC5090AF32C99404EF6308EF51569219F38DFF7F40707963DA313CB
2ACD45960A420A9738619FB1B7F44121FAFD71843453C3607852CCB9E8CE9623
36CD0E586CDF60CBB7EACF5173974B7C513D6CFC8FA7CE79BB1397AD48120177
34375FDABEABF017DDB261F8C52BE06D97799F3534E0BAE1AC58E9E9057D634A
4D29784405EF9967302309A03C4AF84341F8FBDD280BA259AD5D78D569E68DD8
40989522C6D1CC140EFA33374DF81331C88F24BAA19894848CB05742CEC07A1D
8346E63DABDF52FDC30EC7ED67E1BDD3F5C91D77CE309B9F85956CD32E255098
8894F369C9CFA589774B8B9FEF5C908064059AB1EB540DBA6240598F0CCF388A
46FDB9C480694B139B806CC75AD4D68E11E54F751A7529A6F1A10627968B8FD6
255B2C5D0BC39D4EA12B70023E7264C4190251AC4F6C66C5A96B462C4617A3A8
2ACF5B4D0112F45A1899EC4BDC49A0138AF062B45445005AC78F06F12CC83DD8
507406332FE95DD7CAF7FA911B3812387AF7811A22D1370626459D90CDBEFF4E
5CE884637D5D926F2FE9B0513A7F0A7BEB0370225CBE52FF4233BC2D5D37B8FB
4B4196317489CDDAC43A6DC53C1BCDB21A08C79C0E21D77751C072C8B7B84F11
8E7AF829373835016461744D09B6837187704E55B760EB321515B51C23662346
ABE8965A5D1D8593EF697D010D263D604E21DA49034D474B3208158B4F210D43
A5DBDE9DE3F9C9C6024136504B071A4522D5C2BBA187D2C189C5B707A3AC90E4
D27874F6EE53AAB5D33135B7B2C0D8E52A87296DB7C85F76F0A7C39E500619B6
8B36A0A5DFEE0B1C64326B292C52F9660CE3C2EF6AA2BB15CE929896A33FFA57
7D7981143E9C011C1C92AD5E27B24AFC394CFFAF0EE7E13E6291DA920D9B8C74
90AE8F6B3C6A273C8CEEA80CF9A5F9E9261AAEE869A25BBED97CAB414ACB558A
B24A7AA98C435DB91C6A933427816DB64935E7774D5693F1B4965B8430FD24A7
80A0315E225C4FC5E91094911390826C410796B15D97FB847F644EB7F0722313
56E8513DE162CFEF6E4542E6618BA7D44296A23280E4B6A5DA081561F32A55F4
9D5752809D5BCC5C2BE46EDA8B1FCDE8A6DF3A0E28EA129F4EDD938359C2173B
62A72B3C3742C1CBDD2AAD8FDC2EF6FDB55DC6D7F50683D09D488382054067ED
03DCDC93C1937BB4F05CF8CDE2BA66FDC2C443DE33BD92FCF126DDD2F730EF3E
A259F043FDC664D03BC5FE58C90AE6696973977DE018B49185B71F8B975A1D94
0309C1FB88E351CFF711AB7B9EF8864691C06E8D5C9CF77579F5A8D1D2242E02
E46D6758DD7E63AF56B876AC8372E7FFFCB136FE8083661395B3FF47C93DACD6
9A2DC17884E29B9FD8750884BFA4341FDAB4BBCB446690DCA48CF79B4BD5084E
E1AD3CB9C2CC3AA35D2C47B79350ECD2090A6DF176D3492128F34B6F86023B23
455AAB4B853B75AAC76B23F2FC41426D8471C14A7140A13158F3768D414C662B
E5EC93741E28D96323FB761729AC315B287BDFE64C50B04CBA86F3B65624B0A2
EDF0B86E2153462C5101D87E3241CFAB502EB4B1AA83A965850BF643400673E3
2A4D533B1742306330BAE783A3D4D28902DF5BFED97FFB75287D6ECFDEA8A9D1
13BF12A524ADFACC0B5C9CC9DC469D4A900F8FCAABCE6F42F1A3CF30704F3E09
105E94BE920BB3691E4F869F06B018C7088DD76731F7EE1C54F780873616A95D
5E4576D6F2575210D736C638713EFB9E710DD6E0C25226117A73BB78EC03C100
C1A3C6AF8C83DD358B3A6ED72C729B3A320BC252347DF749B21EDD718239A34E
9B01A3712B5457B190FA14FD7AEC0242F36A7A99BECB5DE16C60C8A43639DDC3
3B2A04873D83AEFBA7EA8CCB0AE0D8FC918EEDF26222F4277CB2D782D0181B67
31174A8BB82E04A4446652451CF05FB63E49FB364A6877C9D17491FE033B6C8D
3899BCA3E21D5769150B2CDCFA84C6071FE2B7A264A7B795596576D95D7D1E1C
262C743E2E7371BEC77CE5078DFA06FD1D6A20D9E02A0519FFFD05FBD4B7B145
0C9CBEFD9EE125985E4C6DA77C85E8FD6380CE3FBC08BFF103F9CE6D8882FCE5
F4CE871A8A57C0BF6F759E4886ACEC4867AD57C089C43E07EAE25605B0356BB5
7946EF54B8B4B50C7E06545544623CF237DA5753DC827E782A1387DAE14ACCBB
187215BD9D41802353A03DF784B493CA4201D434EDEE3D5F5131BE44C22901AA
EE4DAE4A285F69E94D7E845DA99B996640B238CBCC052C29C03A70E828D8FEB9
A62A4816D5978D7D1D594CCA949C303558013FB04BDA4D5744B011D3A5D2371C
3C5B7B112CF0698823DDD55C79AF6978C01AB7E0555D12FAF9ECD8F9BC8A5F29
CDDD1B144987129B514B070E83603F0B1335EA625F88E9533226B5ACA6925D04
CAB556AD74BA1E2F55DA48CD780EAFE4917E89EE5C4C119C790E4D1A19320FD7
FD29DAE50A0CAC5A0A09C2C54206ABA38F964AA966E2B5E4D8DE3E3E866754DA
8CBA62BF0A473E641478DB6A8785F92FE437B88CB10C1734AFE154B9B93CD5BF
B98628847F4F195D713C3A1653D3CD879D9837EED30CB77A124420FA11A85843
BCA9C7161A79DDB26C02C86910972717F9168B359AD3B9BB706B723293828A73
17F081354E8859B9BE34982F74CF514021DF9B23E18524302117546BCBB688B5
2C9EFD893CF180C5AE846A9855150C72DAAB59277724F3B7BFF09F7A669728BA
E4149815A114DED8156765C6B13BBE38ED120D3E6D32E94D3C47FD47EF6623C0
48A754411FE6EEDD0F36113A0CE40B134C4012A6067D44D261E0EFEE5298A015
EA30CFFFD07B1E90EA1599ABA913B6786EDB9AD7463B43B33D2F79140B6C847D
7B79F34B8CFE6C8FA8C4099A97B2005278357C2E8C9D37D1EB38BDE35E6C57FC
F0943604575B7D78CFDE8BC9F37B02EFB30698DE0FFC87F0C3D70F700A90AD30
DAD4953F256D419F330BA3138FD5B35D250C0242A43F30E522B6373AB931E36F
C1B5354775F6C021EF08488F899A970014388CB113DE0C5D258E86BF016330A2
03F0D815B543FD069A42F50ADCCDDB92BB715FFAD72D1FC88EDABDAC7BA225F2
B7619B0D1086BD741EC4508A551C562AEB5697FAC45A2C97231E7401D04C32BF
FFC041D5BC21A0BE675DC53F9A612C45641D879B08D8ACDC7105AC74E107830E
42F7C1E17F31819F467751CD7D20197A1B1B504E41C04B78020379CBDBB0EDF0
BCED1CDAB0507E63C2B1142051B763D562308C0C54ADCF7F211A749B98DFE612
F487FAFC2C5D143DC405E1127991292CFAD03649A9E4C9E3709127D47D0FF27B
5A1BA9CD7C8DA4D2CB28F663A3F89ED3908C1CCD19879BBCA48F80CBED5179A5
724EA3F3530738E0EDFCE82B0974D64A1423E1620F8844E4C2A2A25AEB633855
57B60EEDE5208322AC9C47B581209C0C0C7D89625F553AC86A9E52004BA30BD0
1F012FD464938A1111D3EE1CF2FF91D9E1A0400B088E308FA52B7F5D06C4E3B0
4CC33BA52DB99D444D9CB360C949C0CA6108B7273628026DB623AB7785C11AF0
B20AF1941C7A90E6BAD4B6DF8CBAEF3B629B45DB8E97AB04D8DDD83B462F684F
D572C1CCF14AA083FAC4F2DB3426B0EA0CAEF621930F2B19980BC8839A6B8802
9F74FE54357B7DAF9BE705C53A5A8369D5C6E8756A8A34C9E403D7033F148F07
A93FA9FC361C9D201626A77EB94442A2A572398B527B339AB36CBA99B3DA578F
339A222EDE20AACCA4E9E92470AD6145685B19C653F2E24271D9A6B57C99436B
0CDD56DA2CD69993E203A066740B147D5ECFA5B08A4CBD97E5F63F837D4BF834
168A51C0E5C8AA96C699011251612E2688D53788DD67AC13902FB467D05BA652
63BC7316F71C95FC8D1F47AA2C9C52463D5E569D62D807EF69095A0B40222C57
FDA2EC4D7F99DBA823F0966CE72341AFF9E003A7D381F70D18BD6D55E3E8DBBC
2D45AA9154DA86C416BFCC7438E7498973CFD003BA2CC894837F3BCC4937B3DD
7C1BEFFC2445AAE068A963AD84679E8764F56B31C93B402F4597B39CA8252A51
43877D15868EFEA9401DB7E3F6BDA021437727FBBCC259236F420E2AAE37C7BB
74733E7FA232F0CFF0ABD9EDAB102A1B4E820312150F977770849D12E0B1310D
95E42B1AA1A29B098BB3FCF7D2026D3584F9F4E689489E6AB8C7CC749C0B5E71
DC0017D60FEC2FEC5D3175D60C4667113376D44B348C39D48C51B7727F58D7D6
666D72009312C7BD27B809D271086FCB1DBEFEEA04840B24993EA63A6A4D978E
CBCD4C8C0ACAA8A650B013FACF69C54357548E6F3B8020D5CAB11C6181E56613
1CBE7E1AFF32F1C816F9E18A42D50CF425B1E6D5B847007275972A4911D8789F
65ACFE07A9BB2EF7559B5ACD55DF1DA8B4302E91B1F8F446872EA15A950484D5
A68AD2606027CC9865C6155182B0DE9EBCA741AEC6FC7143962924B456014284
FE5F822F33F36D9A4188BAAE0B6169963A8406CBAD14CDF87A5F91AED28F8F59
2B770DFCC0F22ABAF81E037EBB3F5AA9ACA2B73B7BC6A44FF03669D445708FE8
0349A15BB6D3CC832D961A2DB2BB62807D396E5AC9575183ECAC85953A562FB7
FDCD4508BB0803AD1EB495A761F33C016B36981927361C4E437E3D7847265535
9A6ED472013B92E5677EF4F21F46052F041A65E4883CD4AE29737C85CA0FF032
DEC5A5879BAC87D86990FFA0E8F0A9AEEC03CAA5BC07ECBA0D8B1ECA5B30CC7E
ACB7CF1EA7F748C804BE1FBB0E2C050978724457EAD35502696C7B236FB64817
F304B4C8FC1F14CD5F96A1A55B34D4D6614CC333C3BBC04A9081013EB59FBE55
E3BFAAC6AB65469753EF2B929860F79161363DC33236B2104AC0C6F9F864F5A6
8C13E1631451674242950A79053CB0506605EAEAC544CD40287A3AC30009F719
50E477B346DF323791650B1B14B29FFFC56711CB442D4425E2130DB1E28CAC20
91A9A9092C5EDFEC1F8FAC0253B774B5E820EBD3CAD957D19FEBF14882EEA162
A28507B447DB0BCC5BF24A57B65629529C68FE16A6790BBBA632F218CB7F44ED
B78BCC6B290626204CD49AA09A3D6C357FD64E1E5B18B87D57BEA36F2EFE379E
4D3B7567ADFCF0DADFD6C6A01DFE99D138DA34ABAC2466B627A600BE6BE43C90
DDBA606E45F59A6E4E6F7A19031451647947753E617FE7617E064398CCBE6AAD
934966F9F8AEEC292E20867FB947D0014A6345F38B447819F3ABAEFE79256E48
B0F6EEF1CE2EA4A0C758FA51CECB8E7C038CB79D15DC94225506C2A23FDB14C7
DEE101555C49967AD1796648C1EEE0C28522DAFB4044956A463E174AA7E2EBDE
DADCED89B624C09DA22E8D271C61BEA9566B8C0457C2203421A63362E037A194
B3735BE3A021A804C12D53113FF953006AA3B98B3334EB10FB068615B4A37F9C
F042A44BB061D97A54F44171047ACAD67B096190C4212B66405E7E5BEB5F8262
D94978F3B177D1A6FB93864495BA69778F755DAA432E88514FEB0D0ED9361874
28536732D35C5F5E5317999C64587C452C800D18F5790A2CFDFA229FC84B47B1
4A73A0D3EFE68640B5E9E9FFA0DBF6D7425BEA3C944BD126C74B686A3B7D9796
532B8B1ACD01FEA754A26A0CF1DBB90769A52CC3D2B1CA9E6DBAF8E26E162A69
A2DF1F2FEEDE7755F92CF15DBA30D7242A5BEE985196EC4128C6FF66F1DC6729
ED1C695F9F7913296504C9853FF7712CCF76732434A14AA43EA983E8308C356E
507F7E43EE6EF82A18E2D35F195FD75F1CEAE77A9700952DFB4AA2C70C505C4C
C0AAFC0208989739F4ED54E1C114FD9E474ACCA8630930DFAF997A6E6837506F
828C516BCD576EBE4F98AB936D51EB80AE9244B317C3065E7AC5C08FC6F6B0F7
18573C654B2CC81CA7CA7E09EAEC2D9E80EC0030570D43AA785826E31DC5FE42
F5B5B3D73C934744C24AFD9A73E7AC1FFB633ECE47308443F2524C5760441458
71B445F5FBAFC6BBD9D41DA568565CD16365566CDCE8221BC2D8038EDF66E128
7744AB4AE467D2ECF5D5E4861175672F6E2B6B47E006730C0C022E679E0BF1E7
2604F66EA6D27694382D73B8B989F39F3432CD08D4C711254916A6F3672AF60E
C2F31F97750B36646B6DFE3914C5E9C1E20683249E573E6F45C9CEEF7588120E
7CCA83A41B0083CFD235DBFB2507BF5F735CF967B8D633893E85F4DAB328D86C
390D75C48DF0851031987ACC736343BA6840DD1AF4E2DF13D73DC02350639DC1
23B6FD435DEB97A672BE46696094BD9A3A98A08A6615B60AF95011AF824BE640
260912A233E6DCB9E7F877FFE75C96134EE96DA06EB39FEC9B6DAB9F633E1D3B
80941DFBCA5D686D237C006C8F9D1106BD7C25792DDE447EE81A2226E003465E
0E271BBA34DA47707EA57AB085FE76BD77C2DA72DBC5BD84F4BD0C7CD788EB0A
E4C14F0F4DFD3836CC7390AFEB2276BCB2CD0F2194C7537E2FDFD7C2F4CA075E
2A984D693ED2A424B078CFA419A797792CB4BC8B1870FC88DC7CB8470A704CE9
255FF899EE48842A2C3D73BC8DBD562452F8209B9CE5C6BCE64B3A4983344DAF
685373E81CAF788F1E09FEF167BCF9656D0EC2A4B12D921FBD2AE6CF339835F7
A65361DF58ED3CD8085F181BE364FD3588C9C7AD0E72213CCA102B5CA20919B9
E8588C94565B048B312C77930158F5777C1DF2C02495E6ACBE935753C12C0CDE
DE041C926DCFD29E412F51C89012372E5DC7B9DAA613174DC40E59EB94D66F97
52D234847ADDED46C272A11EBA79BA95C01C92265EDD89C780C6CBE684FBFEAB
3B3028E11EBEA1F04AF2DBE0ED4F0C47E5168E305031E207AA637B03ABBADA21
E6305B0CED5F00FF0778DB3AA20542096A81E7403DDCABFDCE851E8B839FE066
70ACE1D73F09CCC1F1BC0C832E841536EE084C410CB48450C82FD3D9E6C810A2
4A146E7EA9F10018535FF8E1D7A79F58BB0575528B1E4D53D1C66A492DDB4C44
B3D2D857F5D95643B3DCC06BD2401BA5324F0E934EA980ACE4033C082B016FB1
462DA6361514982359F127E57E38848B1D626949FDB79CE071E91EECD3AB0FAC
2A16DEC76C27318D0974EC73A9F2E5B25F01962428CC19FE8D770976D2A5B7A8
AF4B60B00A12429EA92B01FFD0889F787CF1BFC6EDE2E1131644F79DBFB2DDBF
1CA6C8604A53E772BD735AFAA47E579C0373851AD2DBD9DA1EC61F7CE48980AE
78F7381FDA3CAA30BD7F39EFB8644EBD6E601AFA69588117C720E544FBFEB422
2399B00E0D9463C6F6D42407290F4611F6FCF71AD39B1E7D4BF202E226D06E49
1F54A8A238EDB5D38EAD68D7C498146AF5A50E2B5FD9E5E9C6AD49513D1240B0
7D506C70789B3972713E1FAB41BAF6BAF8876B725E1C57D96CA2CD7F513A634E
D0B096FA287F20352643EE223364BCC2ADA8EE967C5D798B2A188B55574945D5
8C91F428D40F0EBA59C232BEF4530B5A54ED31D9238AB7CBDC7F430ECA7ED31D
F85424E38066F310AD6D6A2FC086DB14556BC99FBFC1CD62AE07487EAE2C8525
9C44A122749CD7471F9F8DC8659717755E40558FA51C35ACCB11F883A89765FB
B5414385F8BACC737B614FF15DDD63621987D7910F82D93570AF1FF5C4F17704
6C24E799
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /CMSY10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052F09F9C8ADE9D907C058B87E9B6964
7D53359E51216774A4EAA1E2B58EC3176BD1184A633B951372B4198D4E8C5EF4
A213ACB58AA0A658908035BF2ED8531779838A960DFE2B27EA49C37156989C85
E21B3ABF72E39A89232CD9F4237FC80C9E64E8425AA3BEF7DED60B122A52922A
221A37D9A807DD01161779DDE7D31FF2B87F97C73D63EECDDA4C49501773468A
27D1663E0B62F461F6E40A5D6676D1D12B51E641C1D4E8E2771864FC104F8CBF
5B78EC1D88228725F1C453A678F58A7E1B7BD7CA700717D288EB8DA1F57C4F09
0ABF1D42C5DDD0C384C7E22F8F8047BE1D4C1CC8E33368FB1AC82B4E96146730
DE3302B2E6B819CB6AE455B1AF3187FFE8071AA57EF8A6616B9CB7941D44EC7A
71A7BB3DF755178D7D2E4BB69859EFA4BBC30BD6BB1531133FD4D9438FF99F09
4ECC068A324D75B5F696B8688EEB2F17E5ED34CCD6D047A4E3806D000C199D7C
515DB70A8D4F6146FE068DC1E5DE8BC5703711DA090312BA3FC00A08C453C609
C627A8B1550654AD5E22C5F3F3CC8C1C0A6C7ADDAB55016A76EC46213FD9BAAF
03F7A5FD261BF647FCA5049118033F809370A84AC3ADA3D5BE032CBB494D7851
A6242E785CCC20D81FC5EE7871F1E588DA3E31BD321C67142C5D76BC6AC708DF
C21616B4CC92F0F8B92BD37A4AB83E066D1245FAD89B480CB0AC192D4CAFA6AD
241BD8DF7AD566A2022FBC67364AB89F33608554113D210FE5D27F8FB1B2B78A
F22EC999DBAAFC9C60017101D5FB2A3B6E2BF4BE47B8E5E4662B8C41AB471DFC
A31EE1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.1: CMMI10 1.100
%%CreationDate: 1996 Jul 23 07:53:57
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.100) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMMI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 81 /Q put
dup 82 /R put
dup 86 /V put
readonly def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E394A533A081C36D456A09920001A3D2199583EB9B84B4DEE08E3D12939E321
990CD249827D9648574955F61BAAA11263A91B6C3D47A5190165B0C25ABF6D3E
6EC187E4B05182126BB0D0323D943170B795255260F9FD25F2248D04F45DFBFB
DEF7FF8B19BFEF637B210018AE02572B389B3F76282BEB29CC301905D388C721
59616893E774413F48DE0B408BC66DCE3FE17CB9F84D205839D58014D6A88823
D9320AE93AF96D97A02C4D5A2BB2B8C7925C4578003959C46E3CE1A2F0EAC4BF
8B9B325E46435BDE60BC54D72BC8ACB5C0A34413AC87045DC7B84646A324B808
6FD8E34217213E131C3B1510415CE45420688ED9C1D27890EC68BD7C1235FAF9
1DAB3A369DD2FC3BE5CF9655C7B7EDA7361D7E05E5831B6B8E2EEC542A7B38EE
03BE4BAC6079D038ACB3C7C916279764547C2D51976BABA94BA9866D79F13909
95AA39B0F03103A07CBDF441B8C5669F729020AF284B7FF52A29C6255FCAACF1
74109050FBA2602E72593FBCBFC26E726EE4AEF97B7632BC4F5F353B5C67FED2
3EA752A4A57B8F7FEFF1D7341D895F0A3A0BE1D8E3391970457A967EFF84F6D8
47750B1145B8CC5BD96EE7AA99DDC9E06939E383BDA41175233D58AD263EBF19
AFC27E4A7E07D09FB08355F6EA74E530B0743143F2A871732D62D80F35B19FD2
C7FDF08105847F13D50934419AC647CBA71DF74F4531DC02BBDA22AEEA3FBBBB
407E0ACC52BDC60D01A29407CC4F93EB8BF6D4813E9BA858D54F38918AC82720
4956D50291F0546E50FCAFA6DBD0099123F5ECD4AB338DB310DB4CAE11337A89
8ED99B6F483940C97544F888EAF0CBEB11094A13C073D0061808662A04A82BA0
AD35E8782F854AF66C20C0FEF18D0ECDD1646321B93D327E53D88CA0E825FA95
05AA57BD77A225AB34CD5ACC7E73AF40D929E47E13D5E399945CAE0AB170F849
A7367D20708620A9851383AB06588407B2A22956A327F0F45AC1BD22C626A72A
A46ADCD237DF29DEA8CE886DBC3D3167D17D3137BBD90ECD86BCF2BE1C8AB0D5
247703AA65844468ACCBA4C323E8DE3409DBDC52E8CCE1D4F3EF3F3D12417602
ECC66B8A48C9517ED431249269A4D0AC01A1A9019E00FC8F3896357A8955FAF5
560B6849D14FA95D0891C7708ED0EF1ABA83B3BECF0F72B92CFB483784A47463
34EB55550A82A935361C97C9646B07CB3D1FC0DE58B3374C6C041C2179B9307E
79BE7DDA11055A1E34E31CA1E2EB44D9A1BDD29890B4D5E7B9BA31A53375681A
CAF31279671DABDA7CE2B6590367599877F6104028F26F8D1130F9818346D43B
2B9DDD43A430B20580FBADA36E2679E8D7BDF093F3239B66CBF0151AD4F09CAE
4A55E15292B144F9A68A193A502ACEA9765E8CAB626F8A7A3F535B06C483AE51
C59665CDF41F4A20E78E75A33A68A475018B1E102C872C5DDE3E312063E1B2C1
CB2BACADA8F4939BE230D7135298D20D4594CFF7017E71615E763839FA47C261
E1973EC96DF47364A1C7C7F2C47966A335A8B1709B82D7218165F0CF4B2879F5
8D55DDCD333D3B014785404A41DB52828DE64AE86DCFF59561E5BF02498F4147
AADDBA1BE89EF7133E36C7CF387FAEA27791B7EB6519AF750EEB6D7C85D006C6
43D08F2D03BE64D678D84481FFD0A44773D69291099EBAA8975504AAB8C04534
5B9AEEEA4AD685EC188209C4E0A2E1280B6FF60A9F496B4A0E2DD715FBCEE4F6
84577FC69A3ECEED878CBBBE7A023AAB9211CE91ACA92A0612B8A63D9629C511
F334C75806EAA69FD840E1E4B70AB09FE69475CB8DC1F982A4A5A6E5D125324D
08695B49D51B652C6F2C66F1AA540A5D26C2A706A2AD40194A65C636FAAA534F
2B1056C6DCFEEE966E6B3FBC0F0269AD6BF1D157CC2AD925795ECD78DAFBF108
8EF3F3E09FF7AAB18DF4921680926492ED3F357ABCFA2318A99AC62356886EFC
3DD052761C60CCC87DD6F08F81814B18DB89977049BABABB4D477BB3468CFBD6
1C71BF41AF4CF0F6233FD9833F9DF554D8EF09148700AF58CA382DB62FCC0F0D
E93CA7E20082D0908B7EB7A4329E0F06D7BA1EC87881C5DE87C38F6FC86D096C
12E2B173BA871F7DA65B2E8A2421C0C192B9A1F137A13E048915761F7ED4F52B
15741F9AD13655DDD0C3533A0022CAAFE12F2B3C8A36EC0821449BA68374BDFE
CAFBF6E20DC93CC6E806BC634F6D827D8B54AC674FDA64BF6FB7691DB2C15280
D3F508600DA028BCA9DC1ABD8047157F83F8815C725D69974A9AFEA4E0FC21F6
587B7BAD56EF37EC1B5AB9FFB8ABA62E6A01690622979EB2CCA56B4ACC32D8F4
023938DBF6A857B76299507181495D464CB29D7C3C422C190BDBE42F82E80619
60620BB7AAC19EA09D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.1: CMTI10 1.00B
%%CreationDate: 1992 Feb 19 19:56:16
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 66 /B put
dup 69 /E put
dup 73 /I put
dup 76 /L put
dup 83 /S put
dup 94 /circumflex put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
/FontBBox{-163 -250 1146 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E3948FFB0B4E70F212EC976D65099D84E0D37A7A771C3101D6AD26A0513378F
21EC3643079EECE0C9AB54B4772E5DCA82D0D4ACC7F42FB493AA04A3BF4A1BD6
06ECE186315DBE9CFDCB1A0303E8D3E83027CD3AFA8F0BD466A8E8CA0E7164CF
55B332FAD43482748DD4A1CB3F40CB1F5E67192B8216A0D8FE30F9F05BF016F5
B5CC130A4B0796EE065495422FBA55BEE9BFD99D04464D987AC4D237C208FA86
0B112E55CE7B3782A34BC22E3DE31755D9AFF19E490C8E43B85E17ECE87FA8B9
1485831624D24F37C39BF9972D74E6EC4784727AC00B9C4A3AD3DA1C22BD6961
7E0ADAF55422F22ACA5E4DCD4DF9FCD187A566B7FB661D0530454D0DD6C6C50A
7A3875C6CBF8EC7769F32A1F3F7FC1C072BADEC97794D4E90E0035282A170402
356E5A9CD9ABD80AC4342A5283E458A7269252F4541CBB6452B39ED54D336D0B
19928E9CD1AB26AD83EB209E2EC75011A2643813053B5DBB0246097C4821B5F2
C92554E9140BE35B2DBFCD98809A8EC9FC910FDE9E0D86457C70ACB056EBF90F
244DC0A5BBD455E15D6E3180311D52CF50B0BF7D0A7F64F3A1821E0AEDBC2E7B
AEB549FE1D51088C153799C6E089B5D5D65E1C4E2D2B430CDF1FFA23CCB25D95
5C43C8942435D0AAA3D9055FF808F2C3C887A3C469BBD98F026D0A59E26BA9F9
C2144CFE49A9AD892D4D31764F0AE3A10644AE3966B0A790684B14D11FA49785
EC5565D2B2E584CBFD85125F3FAC133338DE35361943DCE9AF05FCF2840CE512
998D42CBEC52B57B79DD63F00985881E8463396ADA47189A94DDF951A78866F0
B8A3D9197E39335277EF2294308DA70065D910943A34F7D5F2090FB4AA42ED70
CBA469A9F64B95A6FBA4BC89DBC93765E3AE4723162DF3F9D6BDE77DD5870ADE
C8900D6346957B84C3CE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B3DA102B
6DF94E62408E24154BAAC66B2B249C695BC0FA37A28699D9C0F3EE94AA32E3C5
8F8D7F803B5D25014D43A353D719B14B247A87898A960DF68C0C0BAF70C83917
6E9F7B3ACC64DBAEF3FDCD3A80C0AB907EE34500182EAB8A05F5426A2F9AE8B5
F49023C4EB52D58BC449B85998ED156A0881303EB6FE91A5B9076094B5B72571
41A512311094E29D5FBFD01B849CEAF5D116623BB7A382437E4D7CD599BB0B99
B2E5C0D87A1D2CF49D92B4B54E43ABAEC2B4BFE5589DC67D712B93CAA2CCB21F
DCA036361A4C9BA20E7325952FF3CC658FF1A012D2A34BC52351E3602BEF7E5C
D93A934711746C0893E4040D70C8D3073DDC6CD84B131FD16E1480D6526F758B
7A42E5C64F1FEBAD2C70DDAF2DD058C5B5468DF3B1C225B2B4E0CECEFA38ECC3
046EDDC1D0507FFCFB4D5E946F7A511581BE972CB0A84534515C0E9BF2BC0226
1679018AFD58B3DE3D80CC61CBE5A5F5D0FB9953DA9320B060D95B39B9C0CE43
4D0E9FB181CD847B4DB795CBAF06DD6A645DDB7F72B259B6B685D208A311062D
C34AF2B38EFBDD1B98979A15A99D788619B9DC18276168B56939FA9431A34FBA
FABF8B8918A0561EDA1280A9F781458B3465D72991684005EF3F5AE90A570BC8
ACE688BCA7CD3B37AD93E8F2BF8BA4A93FAA3577308EFBE69E2FE45C4B48EE17
2DC6CDF6C222094D63072F99DD09AB18E6FB64897E0BC86FF4428AB6677E773B
0B931D78E870F5ED5DD365E216B65CFC0B6817EC82FA14D414A66A2805873818
8C8B531B88F95B9CC9B035660F05EC29021BC37584FA183E04D47B76FD4FA366
0E43EF4F756955469F7A4D4974F0918C20048345B6FDC4293B4E189C7CC36B8C
3FA5734B1CCC212EE77C32F1FABBED53FAC76CC720623CB80917F5BE1A419B83
A7BE1BBEE847E3398A31C7800E9FBDE6845C1295DD1ED74AB0B54BF05BC40990
9DAD917920A6F38B70DC0C1F7AE82EFC8A69B5529C45E6666EC520B5CCE2873E
29E675884363E2247AD5823C4A5FF60B9E90B4ABB8C1D2C09BEAB990DC17A838
812D78FA84556A776015142B532F71900917FDB118051548639E24DD121FC5ED
5B997D54245F696390AD3796328A6F2CC019BEB5BD5A28F22939560185B029B8
3324C0BA6DD9038E269D2ABCC43A5306419838DEFCAE60C91C064F0F67CB2126
A4DA8E2A500061235659D24516C94892F758AA29B3A1191C87EF6CF913451CA2
3E868129F3BE30DB00ED4BE4C10415F3D53AE9A7BF3B8444C845EE50A0CD7264
548EDA953FC634C7BD92ECB1DDBE48D245A53F3D667FFDE470C4E5A02E4CDAC8
550C51035EE9E00ADD0D79795D40577169F3E58CDBE3B8A30A4357BD78173B67
BBF6093BDDDB830282525ED30F11A5F181E4C3556B0926095166F5E97420F314
5D7976D58340893DEE33CCDF1DAB6F6363A22790256D25F937A153C95F5347D3
8B8BA00C87E3ACE7ACEF87225B4E247E09A76940AD1E2FD0D713B7D13EA3DC5E
F48F6A8A26A65F6316EAF2017BE311FB86A8C572F6563FB63452196710C0C1DC
06B010E185A43D54933D2B20D3702F64B3DECB050086EAA5D754BBC3D4E04CF2
01B37B65E4A6FB67A60E0A18C2D9BE0B1B36D4D22F602B8E5D5415FD855B0090
9DE51C99D94E4DB943394C58A6C6909925BC8106CDB933F98C9C2FDB1777967D
B71793EC46B92F376966485DA71E6A8C9850CF9A7534D7F50D17D77E092856BD
AECDD3D01F72835C16A8FCD89892FFC739C42BD7225A5BC94877FAEAA01DE7D9
3AE013235334FFC095866C8D8A78F7F9D04F9FFBBD28821A115014946F60E7EF
03397A304B4ED764118B16DFCC3D316451DD8EB3A52819B12C069927DFF4759E
8929E3EE251D12F44983FE1F793E397414C6E76D13E5DE4C1811AB7A6415AB82
92D3A5BA8950749BD59BD18B1100243F1C837D684512863DCDA4CCD15C03ED67
AC57B997897133ED82F853A58FC2F4FFFB00B006221229CBF6D75FFEF03C2E77
C27E467A758EC9C6572C951B9361629A3F6C0D913E53A01D36C17DBD56AA5663
11B62785D34624AC6903C54DF51028C82DEAB36225BBDDAC8CADEDE4279A9EA6
B15CA8A03AA890BD15B924B822222185B978D623C93CD6945D1CC0C159DAE483
80460B4474BAB831C29B7101BB54C124A3C5B07784C864E326C7CB89A4143289
02DAF013FF2447DCFD36ADE1376EB8FB90C7D9B754DB1B3C3402C17E8E864EFE
4C095D12D8C881ED36C3B28478E7AFDE4A260FEA4EA9F11F8941DC0FA9339807
D1B4BE4D4AF929AD360E45207EBE5B53E38D45F3AFFA535A66C2EEBC8D91E39A
3E04610E4F7374BD8669D7D7D4D61396CE4AF19F36BC3EAEBADA445097A915DA
EDCE115233B99516D08851797850A77F6ADCFBAC28B9C0F87884AE95FD0B81C8
B203CCC8FCD3381BD25B2F9B37F12B97982F8AC75435CE5F24D2DC710AB4B5DD
004E0B8252A1EBBC247DD75AA737A4F4AE969BBAD6910FEB22CCC6924E23617D
7D55666EEFD118002AD7A0C6D1DC2F30CC76DC8FF09972793A8D917CD7D112F6
FF218B43AE709B8400A919CC857B90E433C8AF08A0ED6C77763B25640A046687
5103085CCBF719807FD5D4DD9147F5424B5D5843144C7C3600B4A805354E965C
662DACA8FE06B406C5752031EC1F99255ED05DCB933982CDBF8E28A31BB2454B
4F8DB9EF214BDAD11144244F047B4B562613C0B4A35A67B7888E7E724FC6E955
E067915CAB552BEF48BD6AF55FE942A01518A1EA55E795269DC9F0AAAAC9F567
C433D19054CD71F7CABE7850684B570803783DD5D59F06F57E810C372B1FFB56
DCB43D513595A14ABDF22728260E6D90EDFA93ED3012DEB10F72BC0C3395807E
4B2E87676BB70C009DFEF935C9A58F6F829F3F6CFDD45DB7B711AA91B4095868
59F96E1E07B40590F32F9396D993DAFE2F0B5A1214422FBE27D925BD8E8006EF
82271AFC2B0A0B00A1D1F6F1894D15B01757623DAC0E1089B95FD8A53523F743
3783D401B45EA5C97CFE577B4CE63D7686B2A6584ABEAE6EB83B9FA4015EFFF1
1B0A81FE8973341DA78DAC6477DF55AA37BA34A35BC1B0BDCAE0C99297814948
6973A223255FA4C3D7EC2C49E651B7EEF38324F37462ED433543FE4EA62C7EA2
F100E0C3E0CB054BFB25C9CDC25681ADECA3D1E54977BF4F4E1FC4EB367FEB92
97A421896663E49AA54DEF8849248CA5399784BB58CFA0CB10E28A6CAF34B144
EC97BF5B9E3340FD0A793B0977D35FF08981A2650A62531CA95FDCD09577C696
DF0742DA38E173344F0163F8758D169B05380FFF958FD0819D7094B9C1A8914A
C00BF15BD4E58BD665A68811B48A03825D415BFEAB8976238E2335E3D8D3C298
466BA9BA284170E257D342CD3B5042EE9C9875AAD3476D201CCA222ECA32769B
486B789AF778FA65E130DCE12BEDD0ACFA80BE05FD74E254D423A13241542058
D57EA388B0301988A4B4D96D06DC1CE655ABAC625F9CEBDFE4C80BBB9091F8D6
A07D368EF9CA1054846D704512A069C8E168C3BA090A85A40A0BF73067890916
019997E1E160C9144F843DC93BCBD6670A46F89E3292077B4377A4510986B217
0E01A67236307D16FF0B03515A47BE3557FBE7BB0D107EB81A6E11D005DCC729
A6CDD3F547120793107327B65DE357B0C4AF80FAC0FD7340C8923868B5B7C31F
2E7C5CDA584ACDC5621BEA8C6C37C1BABA33BE97966FB1EF6DA08CA81C4FE04C
5461A6782376376C5B2C1C32F52DDFE8906BA92FD54AA37D71A987630F524BA5
6E88740E7CE886408D88443DE7D936CB491DC246A432176EE880CB541E842504
D82AEE3EDEE257840E566ABB2EA50F95CBC13DFB459432856A6FDCEFAE73F8A0
E664C08DD9ACE7322129B66C7A8E1A31F0069EF24F8B5014C6A4407738AD9A20
8645501DD3BB79A89AFBA3A40A215AEDB9577BC86F938242D7605710FD249443
332E8411BF5A3B63F400D13DC736ED8D820716D41DB2E9C4B0AC34A36B4A9670
E5BE6B6A56E28D68E28DBF8DB272C57B99A88E303660C11E476E35CD99E04BD6
9AC3EA04EEE7567E35A89EDA73F5CD50D0798CD97C1C8E237D484F6050BB0B4F
E1A6A0ACEC3E3FEC8780F905082741A249D0DBCEBE9764B248600B99264A8C16
4070743CAF0878898062F8CFA26EF5E3FEE4E2BD0118257D6E264A3D5714D415
E8B5A06B40DF27A058910565CF4D13340ECF33FC9F531DDE84D4E0B435F18C84
3827EE7976F43444A7D5A14235885E22B76E4904E6E58E2E336D2789FFD528D0
650A5397583773C1B26F920ABD9BBECE4D0B29635F3E209A39433EDBB8F0FC88
295380CCBDC47C4ED20E53256CCA745D5DDC9DBC7E2F32D0584DA40AB1C52816
9D57927043EE6728BC2DB6FB3F228CDE1E42411E97B014D36B92022370A61D48
E97ECD4BE97CFCDDA2B12C128DA7579BC8DBD147233CDC33C2C59E74C2CC0D7F
AB5531F6D1BCAE72F321DC05DF5B5D4CD5088F18A1897BB9893AC4E9963E9EA5
97133691B0F2F926D484D41432B993221C42D62C334042AFCC9486CA1E024A24
7B241AF0545E8F6374DFF69E4BB20A722EAA5C2AE1684E17BF99CA444F42B4F4
0E59942AB0564F367F63D6657AE229C36E475DCD6D33D83A4C709EC490E01A13
607BBFFDB4F275BAB7B449425978BFAF02875FA678C5C4A7EF48200ED43215AC
634B84327BB6A72F2D3E555CF7DA198DBAC61AFE0A6A9A7C0778EAB7B08E7425
2BD419F303044638948356A217D3753A2379FF9D632CFC627D42D4F24FBC7C75
5957283067C78D4F92614F291B42F44FF6F3E8D79A3D83500C9F741AE95E2A7D
45A20A72E348386B885776EEF7E6ED5DCA7926D75C34481B16BAEC9E0FF79E52
3F4B9DD4697548C1A0D3F979CAC07A8024BA205E258AE06021BC6898AEE81B22
F147A814DD0F6DB6A410DF3D796AD6EB64B3B9FDA955FE4D2D61F180F73283D1
98949D0B06ED9A1AA50F529E5A775388CB0B8F1BAF437AF788B7C58884F20E36
D747E5AB9EFB7DA46C73B1021A7F081A1832E124959D89E560E415C817AEF233
F6466ECB6DF1781030DC2F4AD760DC5B32D4AB32542E7F99728B0C4D1907C81E
58315E77FC5CE9488D36F43FE7134A8FA0170335F4D62BE2DC19832086CC1ACA
3493A76F18D28C9DE85784EDEFAB7C40CDDC5CF170653A8F5659E5CF88C8D1F2
4C828CA627D46B10DFE8F01D7938CB087E389252FA8CF2565468D6DDFB76F2B8
66BE95FE1ECC67F9F165C73CAEAAA5A5A7E53755C8747CD670455CFDD8E4C7F8
03159DD1D741EAFE07557578CD23BC85FC002A20730A06C59D9FA80086DC0AD7
37768BF26060D6BAFCA22DBE9FDB05CFB0A347AB62FB0AE4ED0AD2D13920A625
57545FA9E301F2BF4FD427BA0987D582E40EAF89AC1EC62080ECF634D6FFA6D7
ECBF734F23F8441BBA4263F634F4CDDD184CDD27E62EBA32F708229F1A3073BF
208D19B8362CF21AB7D7AAA0112A8678870A20F3AEE377911A29513CA3DC8F73
FAC51D8457E6D3B6458C83E4916F0B03C5C23EF18B11D35F1649DE48324AF722
C1DC2A13E476028A4FB16D64514EAFEC90F059264E0E7700E07EE4DEEBC615DA
AF5E43505FAB7E1AE276C1671C6C6E567874DDAFE6ABD6EC1E6D73CC14E0AA53
FB5C0DE8C9F800203FFC3ABC46333839EC447DEA1E2A1158B95135D0E6A39616
70026C1213EE3AF03CC613212EC75E071E6AF9A62D90D25FB93A579B562FCF6E
A6E0A30891CA0EDE67B656F14AACE21E94ECCF4B18F80FAEDC5B760F7432FA80
4AEFF89FF4CE3EC7AFB2AE7103767A99A2A9365DD39EF6D4DADE63434A1E2EF1
74ACB1A3EDD84272A03ED4D19794A91B28DBB5D50702ED557F91EE744B57996E
EFB86962DB62B02613E74383F0F196C5551BD979D62F235C9AB4D560E04A4EF7
EDFA7B690C682F5C67BFCA703FD2FB54F5CD7B54EC4D980FFA9D3A7303061AB7
18DC4DBA490D86A083CC2136EA5C2254BB8D3C1FADA5A6C0D46F3FE73D9C51C5
777117F8E20BB92D9F768B87E6AAC468C7035ED67A25F30766531A653E4E09B4
E038846E00F5B0895A22F029F307A64B46564E29892EAE7A6201765D2D2F7743
41061971A0F126B412FB153A3C7597B87A753B86E8572B16457950F4203257E8
7DF19BD8DF06DEFC0A01862634F890758290C2A90273D1DBE8EDFA718124A8C8
89160D3F260FC51B90A63334B03C8A1F56F001A432A81C2B6EE8DBCFFBF39489
8AF62E6B2DC94A06B528A31566B7A3B3B5A313CA6C184EBA0E16394A4ACA1C64
761015776EAF91DCBBF908E83E956CD89E9EA54DEED8E149AD35F5EABFA9E0DF
A40415359F49D28F46CB0732568B3E62618DF3AC51EE370647B42FF4CD2D410B
A219D47FFF2D255AE9DC6B1B5B0DE76C6B2747939A8F7263ACCC97062E4A98FA
D537A63555832A2ABAA8890CCF377D7B5B4FB670C637DB1889A81C20409C521F
E31F6EB450007A2B3BA91FF572412BD3CC652C788C90548489BF91C4C56B8A04
B189C9F6E7B1CDC950D4B67E154E1B89334F0AFD948F2AF15BD834330BA36069
4D8DEABAC256F60E76289A0D8C46B869555EE25DAA06755FE7A21D16237CEF51
5F2392E1B2623AA3C43B9EC049EBEE599CF21662AB61623048CF6E2B919CC43F
875017F80B085A165291192B6FDAC3566E4D8DAB2A51C737D181FE6366F1B6D2
8AE3E64CC753358EFA02DF89EB24940EE2101EC1B4058A7A5DD877DE70DCBDE8
C8000F32DCBCF616BBA5F030C9916B41EABFD7F7AB168BBBB932D5C6BA53D38C
60D984CEC0292BC96C919FAE5B255EC5457DA77A557A28B465EE977F546DD1DF
C23844376E965A55CEEB25A13061CAACAF589BD3426A6F2AF3E139D4E92F2063
5716280CF3B470B25AC84B3F8BE8967DDDD2D02277004FA003C0A984B91B0793
1BA17215D382E231C1FDC386E7D7E66AF64104FA91BDBB4BEA3CE04B558DAB76
1C4848D83CBCBBD6B400229BD38401215EA162A76DF761B04458A0A5C0E4CCF9
01F7B94E74C858AA2413E7F903E8A966F39349C2E18CE6547EF3AC96AB097536
758517A645F73919FC7B9B7654C0A8FCA2D7C6CF54323B24F840D9A6808BC24D
9F07F86132DBE916D84E176F392E4907C267B251723665AE4D34629F7886A32D
CFF4C1D61FF5162AFDF669E8A66D142069393AEFD1F838EBA36E08EE22950F1B
8200ED6AAA287609FB004F459ECC6E092173740FB57D9B5D3DDC4B4855D3641D
8CEA4B69A9EC447EE71354B45CE25B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.1: CMR17 1.0
%%CreationDate: 1991 Aug 20 16:38:24
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR17 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /D put
dup 100 /d put
dup 105 /i put
dup 111 /o put
dup 115 /s put
readonly def
/FontBBox{-33 -250 945 749}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F075EA0A10A15B0ED05D5039DA41B32B16E95
A3CE9725A429B35BAD796912FC328E3A28F96FCADA20A598E247755E7E7FF801
BDB00E9B9B086BDBE6EDCF841A3EAFC6F5284FED3C634085BA4EE0FC6A026E96
96D55575481B007BF93CA452EE3F71D83FAAB3D9DEDD2A8F96C5840EAE5BE5DC
9322E81DFF5E250DEB386E12A49FC9FBF9B4C25C3283F3CEA74B8278A1B09DA7
E9AE4FBAAF23EDF5A3E07D39385D521547C3AAAB8EB70549756EBA8EF445AF4A
497CA924ACCC3DD5456F8E2C7E36946A5BF14E2E959895F7C94F49137256BE46
4A238684D52792234869EAE1A6D8ADF4E138B79472D2A90A6CA99E2394CC20CD
3841733046175B20CEBE372327BF13428EED6A3E2FDF84C2DBA4B0AD584EE9DF
B51828D3B8F385846158C29C9AC3496CB9692DD10219697B2ED4D425C3957FD8
C4600D76E045C561216EF05D38177243C314877A69A1C22E3BEC611A2EE5A216
9B7C264CF6D1839DBBD78A40610F2C0D7C2FE09FFA9822FF55035AD52546970F
83EED2D30EABB1F303091EBC11A5379B12BB3F405E371519A53EA9D66174ED25
A2E55463EC71A97BE4C04B39E68112956117C8252DB6FB14AB64534B4BCD568B
246DB833982B38CDE7268BBF74B6B0C18091E1B1F87D32D66F4DD023D1F10D2A
7736A960F72AC01F733A11023832CD68FB6288A5977743F781214D8FA9C0C3F7
80001321D4397771F728FD9EE57CFE7D9192B887EC883EB1505068261DC40089
7B7D2820F06515CD74513521F6397FEAB3AD3572D9A8269430E407E357422461
1785FC2782047F4C0339D79B16862D939F3A37F78E4E2174E4FBF132539CB760
207999FF86F6A3EBE48EB0A1CA635450FDEEF79EB16D853F3BF4B37E3B28A576
63AA7809F0B8718E326C6FF6B258EEC9AF8F15E122AD6FC959F4CB6760C9847B
1A438B72D0640FD59259DF796020A6E07CF45BEF2D0BA028A866FE0E8589E3C0
880BC4ABB08E0A671F0728DD3488F11DE3819B24E427620B89241E28C2D5409D
E2A4315E27E4F031DBB0072ECDDBAC4D789070508587A9147BF10533B9E73A56
E0AF1D3F581A5C8271A465BD1750EF935C34B6631AD720D62B2E8DBBF52418FE
0DB9F90EA7E4D9675F5868F5C602DB3AD9DDCAF46075B7FDE9A36E199883CCB4
307D5F657F5CAF29480B8838078636C77D82B4C2A2C96499BDA2CFDEB46D274B
418F152BB853CBEAA7890861B40B506C7624FC751061B39987AC369AC2448912
68105C2A3D9923FFE9FD31595B3F7FA66150E35C961BDFD7DF054E97A89D46D3
1745AC58A388CFB1901B19A22685F77B575DF862FCF3C2C694E65553A56ABCAE
373AA0C2A6113C11BC332A8C109317A33382FA1EE8E58E9DD90123C8B7409596
9EAD0C9F4B1F889EF516A5BD206DC764C8775CCAA8F3143B8E4FED579898C641
E08725C94820185273BF55DDA155F4090AFF67B2113622C04EFB4D49E4E6F286
D21346A0A1090744A8E027D15CB2B64B89755E13A5583B7E9CF3FC52F8560892
027F0E178B99F8DBAFD29E5A771AA40ED2148076FB672E0BDF2588DD9F3D78AB
C97C7EF5659D8A3D100FE4EB8DA25E87AA314FE498ECC80ABDEA974DAF57A288
19485F361AA318C4DB5BFDD23A589C607BA67B5B300A57A608826A4F3E6DD356
EA3CECDCE150D2D00B452F9296540BA26A19029BB328FB0969FEB235967B1F1D
C3C282CAC51933323DAFAE3AEE8CF6C18C703210C5DE408CE233B4B462F9C59C
AD28F118AC89F9E030FF0699F203C7C8CDDAE17F050C110549FDB578C5EE0E2A
34DD8B7132C8D441A419B01AF0BCA946C8CBD79588A99B128FC32FD3D2F90A45
B7CC2A4AEA06FA3C793B99B6B2FD1B231539A8225E8CEBE52DA8DF1985AE0CF5
3A09AE6C9E7213F22A7CDECB7E83F6B14FAC54909858F9C4DC89DA1E4B841BBB
48E498821B5C42788AE2C48330B1965EA42FA3BBF1D078E7E2EEC97D77DACF7D
F767D0AB8CA160BB2AE3E75485D648FB3EB7C13C2A32E0B4DAAD3435B119AC5F
59AA74F0D42FF8710AE80B9715F544C63EECB4BEE5E7FDB28D71A453CA5D2055
320F27D84A178073CADC12D4056FBB7405B6C9C87FAF96DEC83CE268A6EC5F00
FDB188E1BEFB5107F236A52C1AEE59ABC9B479
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (lab3.dvi)
@start /Fa 205[33 33 49[{}2 58.1154 /CMR7 rf /Fb 145[41
4[23 5[30 29[49 1[48 50 66[{}6 58.1154 /CMMI7 rf /Fc
135[71 3[52 1[55 1[75 67 75 112 37 2[37 3[61 75 60 1[65
16[92 101 9[88 3[102 15[67 36[75 12[{}19 119.552 /CMBX12
rf /Fd 138[46 32 1[33 2[42 5[23 1[42 3[37 1[42 26[54
2[60 5[65 2[23 4[42 1[42 42 42 2[23 2[65 43[{}18 83.022
/CMR10 rf /Fe 134[51 1[69 51 51 49 38 50 53 1[53 51 62
43 2[25 51 53 1[46 52 2[51 12[65 51 66 4[82 57 70 6[69
65 1[68 6[27 46 46 1[46 46 46 46 46 46 46 48[{}37 83.022
/CMCSC10 rf /Ff 255[65{}1 83.022 /CMSY10 rf /Fg 169[48
3[63 66 13[59 67[{}4 83.022 /CMMI10 rf /Fh 138[45 28
34 35 2[42 47 68 21 2[25 1[38 1[38 42 38 38 42 2[42 10[47
6[52 2[32 3[56 2[58 15[42 42 42 2[30 25[42 19[{}26 83.022
/CMTI10 rf /Fi 140[52 3[66 5[36 4[73 31[101 68[{}5 143.462
/CMR17 rf /Fk 137[61 61 59 46 60 2[63 61 74 51 2[30 61
1[53 56 62 2[61 2[55 9[78 61 2[74 5[56 3[71 74 1[78 8[32
4[55 1[55 1[55 3[38 25[55 19[{}29 99.6264 /CMCSC10 rf
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title () /Subject () /Creator (LaTeX with hyperref package) /Author () /Keywords () /DOCINFO pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 109 -16 a
SDict begin H.S end
 109 -16 a 0 TeXcolorgray 0 TeXcolorgray
109 -16 a
SDict begin H.R end
 109 -16 a 109 -16 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark end
 109 -16 a 0 TeXcolorgray
Black 0 TeXcolorgray 109 192 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 109 192 a 109 192 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 109
192 a 109 192 a
SDict begin [ /Page 1 /View [ /Fit ] /PageMode /UseOutlines /DOCVIEW pdfmark end
 109 192 a 109 192 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 109 192 a 109 192
a
SDict begin H.S end
 109 192 a 109 192 a
SDict begin 12 H.A end
 109 192 a 109 192 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark end
 109 192 a 1521
275 a Fk(EE531)37 b(-)g(Turma)h(S)p 651 395 2599 14 v
651 411 2599 4 v 1752 610 a Fi(Dio)t(dos)804 810 y Fh(L)l(ab)l(or)l
(at\023)-42 b(orio)31 b(de)f(Eletr^)-42 b(onic)l(a)31
b(B\023)-42 b(asic)l(a)31 b(I)e(-)g(Se)l(gundo)h(Semestr)l(e)e(de)i
(2010)p 651 909 V 651 936 2599 14 v 742 1135 a Fk(Pr)n(ofessor:)48
b(Jos)1506 1127 y(\023)1506 1135 y(e)37 b(C)1680 1127
y(^)1677 1135 y(andido)i(Sil)-9 b(veira)37 b(Santos)h(Filho)p
0 TeXcolorgray 0 TeXcolorgray 1102 4308 a Fe(D)n(aniel)31
b(Lins)f(Ma)-5 b(ttos)397 b(RA:)31 b(059915)1102 4407
y(Ra)n(quel)g(Ma)-5 b(yumi)31 b(Ka)-7 b(w)g(amoto)98
b(RA:)31 b(086003)1102 4507 y(Tia)n(go)h(Chedra)n(oui)f(Sil)-7
b(v)g(a)272 b(RA:)31 b(082941)1525 4686 y Fh(10)f(de)g(setembr)l(o)g
(de)g(2010)p 0 TeXcolorgray 1929 5061 a Fd(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 109 -16 a
SDict begin H.S end
 109 -16 a 0 TeXcolorgray 0 TeXcolorgray
109 -16 a
SDict begin H.R end
 109 -16 a 109 -16 a
SDict begin [ /View [/XYZ H.V] /Dest (page.2) cvn H.B /DEST pdfmark end
 109 -16 a 0 TeXcolorgray
0 TeXcolorgray 291 x Fc(P)l(arte)45 b(Exp)t(erimen)l(tal)109
380 y
SDict begin H.S end
 109 380 a 109 380 a
SDict begin 12 H.A end
 109 380 a 109 380 a
SDict begin [ /View [/XYZ H.V] /Dest (section*.1) cvn H.B /DEST pdfmark end
 109 380
a 109 380 a
SDict begin H.S end
 109 380 a 109 380 a
SDict begin 12 H.A end
 109 380 a 109 380 a
SDict begin [ /View [/XYZ H.V] /Dest (section.1) cvn H.B /DEST pdfmark end
 109
380 a 127 x Fc(1)134 b(Ampli\014cador)45 b(Op)t(eracional)p
0 TeXcolorgray 1986 1328 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 22.68802 -10.84004 23.48752 -10.84004 23.48752 -10.84004 23.48752 -18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 22.68802 10.84004 23.48752 10.84004 23.48752 10.84004 23.48752 18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 9.03374 7.22743 9.03374 -7.22743    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 9.03374 0.0 0.0 0.0    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 9.03374 -4.33601 23.48752 -10.84004    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false 0. 1.5 4.01512 0.   1. .setopacityalpha  Arrow  EndArrow  moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale  false 0. 1.5 4.01512 0.   1. .setopacityalpha  Arrow  EndArrow  moveto } def /ArrowB { } def  [ 12.64746 -5.96257 19.8738 -9.2146    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 9.03374 4.33601 23.48752 10.84004    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 32.52127 18.06749 23.48752 18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray   32.52127 18.06749 1.4457 0 CLW mul sub 0 360 arc closepath  gsave 0  setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
1986 1328 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 1986 1328 a 2289 1200 a Fg(V)2337 1212 y
Fb(c)1986 1328 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 23.48752 54.20248 23.48752 45.16873 23.48752 45.16873 26.49913 43.66348 26.49913 43.66348 20.477 40.65186 20.477 40.65186 26.49913 37.64024 26.49913 37.64024 20.477 34.62973 20.477 34.62973 26.49913 31.61812 26.49913 31.61812 20.477 28.60649 20.477 28.60649 23.48752 27.10124 23.48752 27.10124 23.48752 18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
1986 1328 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 1986 1328 a 2227 1050 a Fg(R)2290 1062 y
Fb(C)1986 1328 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 54.20248 23.48752 54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 11.74431 63.23624 11.74431 54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray   11.74431 63.23624 1.4457 0 CLW mul sub 0 360 arc closepath  gsave 0  setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial 1986 1328 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 1986 1328 a 1875 770 a Fg(V)1923
782 y Fb(C)t(C)2054 770 y Fd(=)23 b(15)p Fg(V)1986 1328
y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 18.06749 0.0 27.10124 0.0 27.10124 -3.01161 28.60649 -3.01161 28.60649 3.01161 31.61812 3.01161 31.61812 -3.01161 34.62973 -3.01161 34.62973 3.01161 37.64024 3.01161 37.64024 -3.01161 40.65186 -3.01161 40.65186 3.01161 43.66348 3.01161 43.66348 0.0 45.16873 0.0 45.16873 0.0 54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial 1986 1328 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 1986
1328 a 1787 1050 a Fg(R)1850 1062 y Fb(B)s Fa(1)1986
1328 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 0.0 0.0 18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -16.26118 0.0 0.0 0.0    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -16.26118 -6.02213 -16.26118 6.02213    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -19.8738 -6.02213 -19.8738 6.02213    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -36.135 0.0 -19.8738 0.0    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial 1986 1328 a
tx@Dict begin  gsave STV CP T /ps@refangle 45  def grestore  end
 1986 1328 a 1866 1307 a Ff(\000)1986
1328 y
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 1986 1328 a 1788 1245 a Fg(C)1847 1257 y Fa(1)1986
1328 y
tx@Dict begin  gsave STV CP T /ps@refangle 135  def grestore  end
 1986 1328 a 1742 1307 a Fd(+)1986 1328 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -36.135 -9.03374 -36.135 0.0    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray   -36.135 -18.06749 9.03374 0 CLW mul sub 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  -39.1466 -18.06749 /y ED /x ED /r 3.01161 def /c 57.2957 r Div def /angleA 180. 0.0 c mul 2 div sub def /angleB 0. 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  -33.12337 -18.06749 /y ED /x ED /r 3.01161 def /c 57.2957 r Div def /angleA 180. 0.0 c mul 2 div add def /angleB 360. 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -36.135 -36.135 -36.135 -27.10124    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial 1986
1328 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 1986 1328 a 1782 1500 a Fg(V)1830 1512 y Fb(in)1986
1328 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -7.22743 -36.135 -36.135 -36.135    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -7.22743 -45.16873 -7.22743 -36.135    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -13.24956 -45.16873 -1.2042 -45.16873    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -11.24255 -47.42717 -3.21231 -47.42717    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -9.80788 -49.68561 -4.64589 -49.68561    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 23.48752 -36.135 -7.22743 -36.135    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 23.48752 -36.135 23.48752 -18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial 1986 1328 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 1986 1328 a 2132
1348 a Fg(Q)2198 1360 y Fa(1)1552 1923 y Fd(Figura)j(1.1:)p
0 TeXcolorgray 1984 1923 a
SDict begin H.S end
 1984 1923 a 0 TeXcolorgray
0 TeXcolorgray 1984 1923 a
SDict begin H.R end
 1984 1923 a 1984 1923 a
SDict begin [ /View [/XYZ H.V] /Dest (figure.1) cvn H.B /DEST pdfmark end
 1984
1923 a 0 TeXcolorgray Fd(Circuito)h(1)p 0 TeXcolorgray
0 TeXcolorgray 1997 2769 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 22.68802 -10.84004 23.48752 -10.84004 23.48752 -10.84004 23.48752 -18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 22.68802 10.84004 23.48752 10.84004 23.48752 10.84004 23.48752 18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 9.03374 7.22743 9.03374 -7.22743    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 9.03374 0.0 0.0 0.0    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 9.03374 -4.33601 23.48752 -10.84004    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false 0. 1.5 4.01512 0.   1. .setopacityalpha  Arrow  EndArrow  moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale  false 0. 1.5 4.01512 0.   1. .setopacityalpha  Arrow  EndArrow  moveto } def /ArrowB { } def  [ 12.64746 -5.96257 19.8738 -9.2146    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 9.03374 4.33601 23.48752 10.84004    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 32.52127 18.06749 23.48752 18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray   32.52127 18.06749 1.4457 0 CLW mul sub 0 360 arc closepath  gsave 0  setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
1997 2769 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 1997 2769 a 2299 2641 a Fg(V)2347 2653 y
Fb(c)1997 2769 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 23.48752 54.20248 23.48752 45.16873 23.48752 45.16873 26.49913 43.66348 26.49913 43.66348 20.477 40.65186 20.477 40.65186 26.49913 37.64024 26.49913 37.64024 20.477 34.62973 20.477 34.62973 26.49913 31.61812 26.49913 31.61812 20.477 28.60649 20.477 28.60649 23.48752 27.10124 23.48752 27.10124 23.48752 18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
1997 2769 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 1997 2769 a 2237 2491 a Fg(R)2300 2503 y
Fb(C)1997 2769 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 54.20248 23.48752 54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 11.74431 63.23624 11.74431 54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray   11.74431 63.23624 1.4457 0 CLW mul sub 0 360 arc closepath  gsave 0  setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial 1997 2769 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 1997 2769 a 1886 2211 a Fg(V)1934
2223 y Fb(C)t(C)2065 2211 y Fd(=)22 b(15)p Fg(V)1997
2769 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 18.06749 0.0 27.10124 0.0 27.10124 -3.01161 28.60649 -3.01161 28.60649 3.01161 31.61812 3.01161 31.61812 -3.01161 34.62973 -3.01161 34.62973 3.01161 37.64024 3.01161 37.64024 -3.01161 40.65186 -3.01161 40.65186 3.01161 43.66348 3.01161 43.66348 0.0 45.16873 0.0 45.16873 0.0 54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial 1997 2769
a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 1997 2769 a 1797 2491 a Fg(R)1860 2503 y Fb(B)s Fa(1)1997
2769 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 0.0 0.0 18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray   0.0 0.0 1.4457 0 CLW mul sub 0 360 arc closepath  gsave 0  setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 23.48752 -54.20248 23.48752 -45.16873 23.48752 -45.16873 20.477 -43.66348 20.477 -43.66348 26.49913 -40.65186 26.49913 -40.65186 20.477 -37.64024 20.477 -37.64024 26.49913 -34.62973 26.49913 -34.62973 20.477 -31.61812 20.477 -31.61812 26.49913 -28.60649 26.49913 -28.60649 23.48752 -27.10124 23.48752 -27.10124 23.48752 -18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
1997 2769 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 1997 2769 a 2237 3091 a Fg(R)2300 3103 y
Fb(E)1997 2769 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 -54.20248 23.48752 -54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 -63.23624 0.0 -54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -6.02213 -63.23624 6.02213 -63.23624    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -4.01512 -65.49467 4.01512 -65.49467    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.58154 -67.75311 2.58154 -67.75311    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -36.135 -54.20248 0.0 -54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -36.135 -45.16873 -36.135 -54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray   -36.135 -36.135 9.03374 0 CLW mul sub 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  -39.1466 -36.135 /y ED /x ED /r 3.01161 def /c 57.2957 r Div def /angleA 180. 0.0 c mul 2 div sub def /angleB 0. 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  -33.12337 -36.135 /y ED /x ED /r 3.01161 def /c 57.2957 r Div def /angleA 180. 0.0 c mul 2 div add def /angleB 360. 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -36.135 -18.06749 -36.135 -27.10124    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
1997 2769 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 1997 2769 a 1484 3091 a Fg(V)1532 3103 y
Fb(in)1997 2769 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -36.135 0.0 -36.135 -18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -19.8738 0.0 -36.135 0.0    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -19.8738 6.02213 -19.8738 -6.02213    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -16.26118 6.02213 -16.26118 -6.02213    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 0.0 -16.26118 0.0    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial 1997 2769 a
tx@Dict begin  gsave STV CP T /ps@refangle -45  def grestore  end
 1997 2769 a 1752
2832 a Fd(+)1997 2769 y
tx@Dict begin  gsave STV CP T /ps@refangle -90  def grestore  end
 1997 2769 a 1798 2897 a Fg(C)1857
2909 y Fa(1)1997 2769 y
tx@Dict begin  gsave STV CP T /ps@refangle -135  def grestore  end
 1997 2769 a 1876 2832 a Ff(\000)1997
2769 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 0.0 0.0 0.0    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial 1997 2769
a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 1997 2769 a 2142 2789 a Fg(Q)2208 2801 y Fa(1)1552
3514 y Fd(Figura)k(1.2:)p 0 TeXcolorgray 1984 3514 a
SDict begin H.S end

1984 3514 a 0 TeXcolorgray 0 TeXcolorgray 1984 3514 a
SDict begin H.R end

1984 3514 a 1984 3514 a
SDict begin [ /View [/XYZ H.V] /Dest (figure.2) cvn H.B /DEST pdfmark end
 1984 3514 a 0 TeXcolorgray Fd(Circuito)h(2)p
0 TeXcolorgray 0 TeXcolorgray 1929 5061 a(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 109 -16 a
SDict begin H.S end
 109 -16 a 0 TeXcolorgray 0 TeXcolorgray
109 -16 a
SDict begin H.R end
 109 -16 a 109 -16 a
SDict begin [ /View [/XYZ H.V] /Dest (page.3) cvn H.B /DEST pdfmark end
 109 -16 a 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1986 2387 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 22.68802 -10.84004 23.48752 -10.84004 23.48752 -10.84004 23.48752 -18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 22.68802 10.84004 23.48752 10.84004 23.48752 10.84004 23.48752 18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 9.03374 7.22743 9.03374 -7.22743    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 9.03374 0.0 0.0 0.0    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 9.03374 -4.33601 23.48752 -10.84004    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false 0. 1.5 4.01512 0.   1. .setopacityalpha  Arrow  EndArrow  moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale  false 0. 1.5 4.01512 0.   1. .setopacityalpha  Arrow  EndArrow  moveto } def /ArrowB { } def  [ 12.64746 -5.96257 19.8738 -9.2146    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 9.03374 4.33601 23.48752 10.84004    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 32.52127 18.06749 23.48752 18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray   32.52127 18.06749 1.4457 0 CLW mul sub 0 360 arc closepath  gsave 0  setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial 1986 2387 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 1986 2387 a 2289 2260 a Fg(V)2337
2272 y Fb(c)1986 2387 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 23.48752 54.20248 23.48752 45.16873 23.48752 45.16873 26.49913 43.66348 26.49913 43.66348 20.477 40.65186 20.477 40.65186 26.49913 37.64024 26.49913 37.64024 20.477 34.62973 20.477 34.62973 26.49913 31.61812 26.49913 31.61812 20.477 28.60649 20.477 28.60649 23.48752 27.10124 23.48752 27.10124 23.48752 18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
1986 2387 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 1986 2387 a 2227 2110 a Fg(R)2290 2122 y
Fb(C)1986 2387 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 54.20248 23.48752 54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 11.74431 63.23624 11.74431 54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray   11.74431 63.23624 1.4457 0 CLW mul sub 0 360 arc closepath  gsave 0  setgray  1. .setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial 1986 2387 a
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 1986 2387 a 1875 1829 a Fg(V)1923
1841 y Fb(C)t(C)2054 1829 y Fd(=)23 b(15)p Fg(V)1986
2387 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 18.06749 0.0 27.10124 0.0 27.10124 -3.01161 28.60649 -3.01161 28.60649 3.01161 31.61812 3.01161 31.61812 -3.01161 34.62973 -3.01161 34.62973 3.01161 37.64024 3.01161 37.64024 -3.01161 40.65186 -3.01161 40.65186 3.01161 43.66348 3.01161 43.66348 0.0 45.16873 0.0 45.16873 0.0 54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial 1986 2387
a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 1986 2387 a 1787 2110 a Fg(R)1850 2122 y Fb(B)s Fa(1)1986
2387 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 0.0 0.0 18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -16.26118 0.0 0.0 0.0    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -16.26118 -6.02213 -16.26118 6.02213    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -19.8738 -6.02213 -19.8738 6.02213    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -36.135 0.0 -19.8738 0.0    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial 1986 2387 a
tx@Dict begin  gsave STV CP T /ps@refangle 45  def grestore  end
 1986 2387 a 1866 2366 a Ff(\000)1986
2387 y
tx@Dict begin  gsave STV CP T /ps@refangle 90  def grestore  end
 1986 2387 a 1788 2304 a Fg(C)1847 2316 y Fa(1)1986
2387 y
tx@Dict begin  gsave STV CP T /ps@refangle 135  def grestore  end
 1986 2387 a 1742 2366 a Fd(+)1986 2387 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -36.135 -9.03374 -36.135 0.0    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray   -36.135 -18.06749 9.03374 0 CLW mul sub 0 360 arc closepath  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  -39.1466 -18.06749 /y ED /x ED /r 3.01161 def /c 57.2957 r Div def /angleA 180. 0.0 c mul 2 div sub def /angleB 0. 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  -33.12337 -18.06749 /y ED /x ED /r 3.01161 def /c 57.2957 r Div def /angleA 180. 0.0 c mul 2 div add def /angleB 360. 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -36.135 -36.135 -36.135 -27.10124    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial 1986
2387 a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 1986 2387 a 1782 2560 a Fg(V)1830 2572 y Fb(in)1986
2387 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -36.135 -54.20248 -36.135 -36.135    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 -54.20248 -36.135 -54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 -63.23624 0.0 -54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -6.02213 -63.23624 6.02213 -63.23624    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -4.01512 -65.49467 4.01512 -65.49467    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -2.58154 -67.75311 2.58154 -67.75311    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0 0.0 0.0 -18.06749 0.0 -18.06749 3.01161 -19.57275 3.01161 -19.57275 -3.01161 -22.58437 -3.01161 -22.58437 3.01161 -25.59598 3.01161 -25.59598 -3.01161 -28.60649 -3.01161 -28.60649 3.01161 -31.61812 3.01161 -31.61812 -3.01161 -34.62973 -3.01161 -34.62973 0.0 -36.135 0.0 -36.135 0.0 -54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 10.2203 -16.88092 -10.2203 -37.32155    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 10.2203 -10.8577 10.2203 -16.88092    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 23.48752 -54.20248 0.0 -54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 23.48752 -18.06749 23.48752 -27.10124 23.48752 -27.10124 26.49913 -28.60649 26.49913 -28.60649 20.477 -31.61812 20.477 -31.61812 26.49913 -34.62973 26.49913 -34.62973 20.477 -37.64024 20.477 -37.64024 26.49913 -40.65186 26.49913 -40.65186 20.477 -43.66348 20.477 -43.66348 23.48752 -45.16873 23.48752 -45.16873 23.48752 -54.20248    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial 1986
2387 a
tx@Dict begin  gsave STV CP T /ps@refangle 180  def grestore  end
 1986 2387 a 2035 2710 a Fg(R)2098 2722 y Fa(2)1986
2387 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 23.48752 -18.06749 23.48752 -18.06749    /Lineto /lineto load def false 0  setlinejoin Line  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore end
 @endspecial 1986 2387
a
tx@Dict begin  gsave STV CP T /ps@refangle 0  def grestore  end
 1986 2387 a 2132 2408 a Fg(Q)2198 2420 y Fa(1)1552
3133 y Fd(Figura)j(1.3:)p 0 TeXcolorgray 1984 3133 a
SDict begin H.S end

1984 3133 a 0 TeXcolorgray 0 TeXcolorgray 1984 3133 a
SDict begin H.R end

1984 3133 a 1984 3133 a
SDict begin [ /View [/XYZ H.V] /Dest (figure.3) cvn H.B /DEST pdfmark end
 1984 3133 a 0 TeXcolorgray Fd(Circuito)h(3)p
0 TeXcolorgray 0 TeXcolorgray 1929 5061 a(3)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
